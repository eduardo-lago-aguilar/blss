#!/bin/bash -e

# === WELCOME ===
# 
# BLSS stands for Bootstrapped Linux Server Systems, it is set of tools to quickly 
# assemble multiple small & optimized Linux-based virtual appliances with the 
# purpose of an easy deployment of package-based distributed systems, like Apache 
# Hadoop Cloudera Distribution, where every server have a different role in a 
# computational cluster or grid. 
# 
# The delivered virtual appliances fit better for servicing purpose, they are 
# reduced in size and have a small memory footprint. The lifecycle of such systems 
# is composed of three phases: prototyping, where shared packages & configuration 
# is settled; cloning, where different server roles are defined; and finally 
# deployment where unique appliances are produced.
# 
# The project is hosted at https://bitbucket.org/eduardo_lago_aguilar/blss
# 
# === AUTHOR ===
#   Written by Eduardo Lago Aguilar, eduardo.lago.aguilar@gmail.com, 
#   http://eduardo-lago.blogspot.com

# lxc:
#
#   Clone creation. Run this script with --help for details.

# Resolve script location, $0 may be a link
script="$0"
# Need this for relative symlinks
while [ -h "$script" ] ; do
  lst=$(ls -ld "$script")
  lnk=$(expr "$lst" : '.*-> \(.*\)$')
  if expr "$lnk" : '/.*' > /dev/null; then
    script="$lnk"
  else
    script=$(dirname "$script")/"$lnk"
  fi
done
BLSS_HOME=$(dirname "$script")/..
BIN="$BLSS_HOME"/bin
ENV="$BLSS_HOME"/env
EXT="$BLSS_HOME"/ext
TST="$BLSS_HOME"/tst

. "$BIN"/blss-commons

usage() {
  local IFS=","
  cat << EOF
NAME
  lxc - Clones a Linux Server System prototype.

SYNOPSIS
  lxp [GENERAL OPTIONS] [NETWORKING OPTIONS] CLONE_ROOT

DESCRIPTION
  Clones a proto from PROTO_ROOT to CLONE_ROOT and setup specific options for the clone. 

GENERAL OPTIONS
  --help
    Show this help

  --proto-root PROTO_ROOT
    The root directory of the proto to be cloned. This options is mandatory.
  
  --packages PACKAGES
    Space separated list of packages to install on this clone. Defaults to '${DEF_PACKAGES_CLONE}'. Example package list is: 'nginx  apache2 mysql couchdb'.

NETWORKING OPTIONS

  --hostname HOSTNAME
    The clone hostname. Defaults to the hostname used in the prototype.     

  --address IPADDRESS
    Static IP address. This option shall be specified among --network and --netmask options, this option excludes --dhcp option. But can be optinally used among the --search and/or --nameservers options. This option shall be specified if DHCP is not configured on the proto.     

EXAMPLES

  1- Clone a proto located on /tmp/ny-server-proto serveral times and assign a different ip addresses and hostnames:
  
    \$ lxc --proto-root /tmp/ny-server-proto --address 192.168.2.111 --hostname ny-server1 /tmp/ny-clone1
    \$ lxc --proto-root /tmp/ny-server-proto --address 192.168.2.112 --hostname ny-server2 /tmp/ny-clone2
    \$ lxc --proto-root /tmp/ny-server-proto --address 192.168.2.113 --hostname ny-server3 /tmp/ny-clone3
    \$ lxc --proto-root /tmp/ny-server-proto --address 192.168.2.114 --hostname ny-server4 /tmp/ny-clone4

  2- Clone a proto located on /tmp/nl-server-proto serveral times, assign a different ip addresses and hostnames, and install different packages depending on the server role (database: couchdb, mysql, web with static content: nginx, general web: apache2):
  
    \$ lxc --proto-root /tmp/nl-server-proto --address 192.168.3.111 --hostname nl-srv1 --packages nginx /tmp/nl-clone1
    \$ lxc --proto-root /tmp/nl-server-proto --address 192.168.3.112 --hostname nl-srv2 --packages couchdb /tmp/nl-clone2
    \$ lxc --proto-root /tmp/nl-server-proto --address 192.168.3.113 --hostname nl-srv3 --packages "apache2 nginx" /tmp/nl-clone3
    \$ lxc --proto-root /tmp/nl-server-proto --address 192.168.3.114 --hostname nl-srv4 --packages "mysql-server couchdb" /tmp/nl-clone4

  3- Clone a proto located on /tmp/hv-server-proto serveral times and install different packages depending on the server role (database: couchdb, mysql, web with static content: nginx, general web: apache2), assumes DHCP previosly configured on the proto:
  
    \$ lxc --proto-root /tmp/hv-server-proto --hostname hv-srv1 --packages nginx /tmp/hv-clone1
    \$ lxc --proto-root /tmp/hv-server-proto --hostname hv-srv2 --packages couchdb /tmp/hv-clone2
    \$ lxc --proto-root /tmp/hv-server-proto --hostname hv-srv3 --packages "apache2 nginx" /tmp/hv-clone3
    \$ lxc --proto-root /tmp/hv-server-proto --hostname hv-srv4 --packages "mysql-server couchdb" /tmp/hv-clone4

  More examples of usage on the wiki: https://bitbucket.org/eduardo_lago_aguilar/blss/wiki/Home

AUTHOR
  Written by Eduardo Lago Aguilar, eduardo.lago.aguilar@gmail.com. Project hosted at https://bitbucket.org/eduardo_lago_aguilar/blss

EOF
}

# parse command line options
#
# NOTE:
#   - c_ prefix indicates a command line option
#   - without c_ prefix indicates a conf file option
#   - short name indicates the effective option

# Quotes around `"$@"' let each cmd-line parameter expand to a separate word. 
# TEMP variable is necessary, as the `eval set --' would nuke the return value 
# of getopt.
set +e
TEMP=$(getopt -n 'lxc' -o '' --longoptions \
help,\
proto-root:,\
packages:,\
hostname:,\
address: \
-- "$@")
if [ $? != 0 ] ; then 
  usage >&2 ; 
  exit 1 ; 
fi
set -e

# quotes around `$TEMP' are essential
eval set -- "$TEMP"

# unset c_* options
unset \
  c_proto_root \
  c_packages \
  c_hostname \
  c_address

declare -A c_os 
while true; do
  # flags an option if appears in the command line, options can be specified 
  # only once
  (( c_os[$1] == 1 )) && err "$1 command line option was already specified" && usage >&2 && exit 1 ; 
  c_os[$1]=1 ;
  case $1 in
    --help)
      usage && shift && exit 0 ;;
    --proto-root)
      c_proto_root=${2:?$(err_non_empty $1)} ; 
      shift 2 ;;
    --packages)
      c_packages=${2:?$(err_non_empty $1)} ; 
      shift 2 ;;
    --hostname)
      c_hostname=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
    --address)
      c_address=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
    --) 
      shift ; 
      break ;;
    *) 
      err "Error parsing arguments" && usage >&2 && exit 1 ;;
  esac
done

# clone root is the remaining
c_clone_root=$(trim_spcs "$@")
c_clone_root=${c_clone_root:?$(err_non_empty CLONE_ROOT)}

unset c_os

proc_ev

# unset conf file options before start importing from environment
unset \
  proto_root \
  packages \
  hostname \
  address

# import general env opts
imp_conf "$ev"/lxc.conf

# proto root 
proot=${c_proto_root:-$proto_root}
if [ -n "$proot" ] ; then
  proot=$(realpath "$proot") || ( err "--proto-root/proto_root command line/conf file option shall be an existing non-empty directory containing a proto system" >&2 && exit 1 ) ;
  [ "$(sudo find "$proot" -maxdepth 0 -type d -empty)" != "" ] && err "--proto-root/proto_root command line/conf file option shall be an existing non-empty directory containing a proto system" >&2 && exit 1 || true
fi

# packages: command line may override the value imported from the environment, 
# if the option is missing use the default value
pkgs=${c_packages:-$packages}
pkgs=${pkgs:-${DEF_PACKAGES_CLONE}}

# hostname: command line may override the value imported from the environment
hn=${c_hostname:-$hostname}

ip=${c_address}
if [ -n "$ip" ] ; then
  match_ip $ip || ( err_non_sup --address >&2 && exit 1 )
fi

# CLONE_ROOT
croot=${c_clone_root}
if realpath "$croot" &>/dev/null ; then
  croot=$(realpath "$croot")  
  [ "$(find "$croot" -maxdepth 1 -type d -empty )" != "$croot" ] && err "CLONE_ROOT command line option shall be an empty directory" >&2 && exit 1 || true
fi

inf "Detected environment '$ev'. All options were took from the environment conf files. Command line options override environment options" ;

inf "packages = '$pkgs'"
inf "hostname = '$hn'"
inf "address = '$ip'"
inf "clone_root = '$croot'"
    
step "Identifying prototype settings"

# define working root on prototype to extract settings
wroot=${proot}

verify_dyn

get_net_settings

# define working root on clone
wroot=${croot}

step "Cloning the prototype"
mkdir -p $wroot
sudo cp -a "$proot"/* "$wroot"

if [ -n "$pkgs" ] ; then
  # Unbind devices on ERROR
  trap _unbind_on_err INT TERM EXIT
  install_user_pkgs
  # No longer need to unbind on error
  trap - INT TERM EXIT
fi

apt_get_autoremove
apt_get_clean

proc_net_settings

inf "Clone completed successfully" && exit 0
