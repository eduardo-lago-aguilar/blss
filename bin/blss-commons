#!/bin/bash

# === WELCOME ===
# 
# BLSS stands for Bootstrapped Linux Server Systems, it is set of tools to quickly 
# assemble multiple small & optimized Linux-based virtual appliances with the 
# purpose of an easy deployment of package-based distributed systems, like Apache 
# Hadoop Cloudera Distribution, where every server have a different role in a 
# computational cluster or grid. 
# 
# The delivered virtual appliances fit better for servicing purpose, they are 
# reduced in size and have a small memory footprint. The lifecycle of such systems 
# is composed of three phases: prototyping, where shared packages & configuration 
# is settled; cloning, where different server roles are defined; and finally 
# deployment where unique appliances are produced.
# 
# The project is hosted at https://bitbucket.org/eduardo_lago_aguilar/blss
# 
# === AUTHOR ===
#   Written by Eduardo Lago Aguilar, eduardo.lago.aguilar@gmail.com, 
#   http://eduardo-lago.blogspot.com

# blss-commons:
#
#   Common functionalities for all scripts

## Support 
declare -A SUPPORTED_DISTROS=(["debian"]="debian" ["ubuntu"]="ubuntu")
declare -A SUPPORTED_SUITES=(["squeeze"]="squeeze" ["lenny"]="lenny" ["natty"]="natty" ["maverick"]="maverick" ["lucid"]="lucid")
declare -A DISTRO_PER_SUITE=(["lenny"]="debian" ["squeeze"]="debian" ["lucid"]="ubuntu" ["maverick"]="ubuntu"  ["natty"]="ubuntu")
declare -A SUITES_PER_DISTRO=(["debian"]="squeeze, lenny" ["ubuntu"]="natty, maverick, lucid")
declare -A SUPPORTED_ARCHS=(["amd64"]="amd64" ["i386"]="i386")
declare -A SUPPORTED_HYPERVISORS=(["esxi"]="esxi" ["kvm"]="kvm" ["qemu"]="qemu" ["vbox"]="vbox" ["vmserver"]="vmserver" ["vmw6"]="vmw6" ["xen"]="xen")
SUPPORTED_CPU=$(echo {1..32})
declare -A DISTRO_LOCALE_GEN_PATH=(["debian"]="/etc/locale.gen" ["ubuntu"]="/var/lib/locales/supported.d/local")
declare -A SUPPORTED_FILESYSTEMS=(["ext3"]="ext3" ["ext4"]="ext4" ["btrfs"]="btrfs" ["jfs"]="jfs" ["xfs"]="xfs" ["reiserfs"]="reiserfs")
declare -A SUPPORTED_FORMATS=(["raw"]="raw" ["qcow2"]="qcow2" ["vdi"]="vdi" ["vmdk4"]="vmdk4" ["vmdk6"]="vmdk6" ["vpc"]="vpc")
declare -A EXTS_PER_FORMAT=(["raw"]="img" ["qcow2"]="qcow2" ["vdi"]="vdi" ["vmdk4"]="vmdk" ["vmdk6"]="vmdk" ["vpc"]="vhd")
declare -A DISKDRIVER_PER_FORMAT=(["raw"]="raw" ["qcow2"]="qcow2" ["vdi"]="vdi" ["vmdk4"]="vmdk" ["vmdk6"]="vmdk"  ["vpc"]="vpc")
declare -A GRUB_MODS_PER_FILESYSTEM=(["ext3"]="" ["ext4"]="" ["btrfs"]="" ["jfs"]="jfs" ["xfs"]="xfs" ["reiserfs"]="reiserfs")
declare -A EXTRA_PACKAGES_PER_FILESYSTEM=(["ext3"]="" ["ext4"]="" ["btrfs"]="btrfs-tools" ["jfs"]="jfsutils" ["xfs"]="xfsprogs" ["reiserfs"]="reiserfsprogs")

## Kernel image package per distro and architecture
declare -A DISTRO_LNX_IMG_PKG=(["debian", "amd64"]="linux-image-amd64" ["debian", "i386"]="linux-image-686" ["ubuntu", "amd64"]="linux-image-server" ["ubuntu", "i386"]="linux-image-server")

## Common packages
declare -A EXTRA_PKGS_DISTROS=(["debian"]="" ["ubuntu"]="ubuntu-keyring")
declare -A EXTRA_PKGS_SUITES=(["squeeze"]="readahead-fedora" ["lenny"]=" insserv readahead dash" ["natty"]="readahead-fedora" ["maverick"]="readahead-fedora" ["lucid"]="readahead-fedora")
declare -A READAHEAD_PER_SUITE=(["squeeze"]="readahead-fedora" ["lenny"]="readahead" ["natty"]="readahead-fedora" ["maverick"]="readahead-fedora" ["lucid"]="readahead-fedora")
declare -A ACPI_PER_DISTRO=(["debian"]="acpi-support-base" ["ubuntu"]="acpi")

## Kernel modules
declare -A MODS_CMDLN_OPTS="--mod-floppy --mod-tape --mod-cdrom --mod-sound --mod-mouse --mod-usb --mod-firewire --mod-atm --mod-auxdisplay --mod-xen --mod-bluetooth --mod-wolfsonmicro --mod-leds --mod-memstick --mod-multi-function-device --mod-multi-media-card --mod-regulator --mod-ultra-wide-band --mod-wlan --mod-media --mod-gaming --mod-parport --mod-extra-networking"
declare -A MODS_CONF_OPTS
for cl_opt in ${MODS_CMDLN_OPTS} ; do
  cf_opt=${cl_opt/--/} ; 
  cf_opt=${cf_opt//-/_} ;
  MODS_CONF_OPTS[$cl_opt]=$cf_opt ;
done

# mods description
declare -A MODS_DESC

for cl_opt in ${MODS_CMDLN_OPTS} ; do
  # default description
  desc=${cl_opt/--mod-/}
  desc=${desc//-/\ }
  MODS_DESC[$cl_opt]=$desc
done
MODS_DESC["--mod-usb"]="USB"
MODS_DESC["--mod-atm"]="ATM"
MODS_DESC["--mod-wolfsonmicro"]="Wolfsonmicro"
MODS_DESC["--mod-multi-function-device"]="Multi-Function Device"
MODS_DESC["--mod-multi-media-card"]="Multi Media Card subsystem"
MODS_DESC["--mod-ultra-wide-band"]="Linux Ultra-Wide-Band stack, as well as drivers for Wireless USB Host Controller drivers"
MODS_DESC["--mod-wlan"]="IEEE 802.11 wireless local area network"
MODS_DESC["--mod-media"]="various media related modules"
MODS_DESC["--mod-gaming"]="various gaming related modules"
MODS_DESC["--mod-parport"]="parallel port"
MODS_DESC["--mod-extra-networking"]="some extra networking related modules for Telephony, ISDN, IPX, x25, USB-networking"

mods_usage() {
  for cl_opt in ${!MODS_CONF_OPTS[@]} ; do
    cat << EOF

  ${cl_opt} yes|no
    Support for ${MODS_DESC[$cl_opt]}. Defaults to ${DEF_MODS[$cl_opt]}.
EOF
  done
}

# mods to be purge (removed and blacklisted)
declare -A MODS_PURGE=(\
["--mod-floppy"]="floppy ide-floppy" \
["--mod-tape"]="ide-tape" \
["--mod-cdrom"]="cdrom ide_cd_mod" \
["--mod-sound"]="snd-pcsp pcspkr" \
["--mod-mouse"]="psmouse" \
["--mod-usb"]="usb-storage usbcore uhci_hcd ehci_hcd" \
)

# mods to be removed (not blacklisted)
declare -A MODS_RM=(\
["--mod-firewire"]="ieee1394 pcilynx ohci1394 video1394 raw1394 sbp2 dv1394 eth1394 firewire-ohci firewire-net firewire-core firewire-sbp2" \
["--mod-atm"]="zatm uPD98402 ambassador horizon iphase suni fore_200e eni idt77252 solos-pci atmtcp firestream lanai he" \
["--mod-auxdisplay"]="ks0108 cfag12864b cfag12864bfb" \
["--mod-xen"]="xen-blkfront xen-netfront netxen_nic xen-kbdfront xen-fbfront xenfs evtchn" \
["--mod-bluetooth"]="bnep cmtp hidp rfcomm sco l2cap bluetooth toshiba_bluetooth bt3c_cs btmrvl_sdio hci_vhci bluecard_cs bcm203x btsdio dtl1_cs bfusb bpa10x btusb btmrvl btuart_cs ath3k hci_uart" \
["--mod-wolfsonmicro"]="leds-wm831x-status leds-wm8350 wm831x_backup wm831x_bl wm831x-dcdc wm831x-gpio wm831x-hwmon wm831x-isink wm831x-ldo wm831x-on wm831x_power wm831x_wdt wm8350-gpiolib wm8350-hwmon wm8350_power wm8350-regulator wm8350_wdt wm8400-core wm8400-regulator wm8739 wm8775 wm8994-gpio wm8994-regulator wm97xx-ts" \
["--mod-leds"]="leds-alix2 leds-mc13783 leds-net5501 ledtrig-backlight leds-88pm860x ledtrig-heartbeat leds-bd2802 leds-ss4200 ledtrig-default-on leds-lp3944 leds-dac124s085 ledtrig-gpio leds-da903x led-class leds-gpio dell-led leds-pca9532 leds-pca955x leds-lt3593 ledtrig-timer leds-regulator leds-adp5520" \
["--mod-memstick"]="memstick mspro_block jmb38x_ms tifm_ms" \
["--mod-multi-function-device"]="sm501 pcf50633-adc htc-pasic3 rdc321x-southbridge janz-cmodio ab3100-otp ucb1400_core lpc_sch mc13783-core timberdale pcf50633-gpio tps65010 pcf50633 tps6507x" \
["--mod-multi-media-card"]="sdio_uart mmc_block via-sdmmc sdhci-pltfm mmc_spi tifm_sd sdhci cb710-mmc sdhci-pci wbsd sdricoh_cs" \
["--mod-regulator"]="mc13783-regulator bq24022 tps65023-regulator virtual tps6507x-regulator max1586 max8649 max8660 max8925-regulator lp3971 da903x ab3100 pcf50633-regulator userspace-consumer" \
["--mod-ultra-wide-band"]="wlp i1480-dfu-usb i1480u-wlp i1480-est whc-rc hwa-rc umc uwb whci" \
)

# mods directories to be removed (not blacklisted)
declare -A MODS_RMDIR=(\
["--mod-cdrom"]="drivers/cdrom" \
["--mod-sound"]="sound" \
["--mod-mouse"]="drivers/input/mouse drivers/input/touchscreen" \
["--mod-usb"]="drivers/usb" \
["--mod-firewire"]="drivers/ieee1394 drivers/firewire" \
["--mod-bluetooth"]="drivers/net/bluetooth net/bluetooth" \
["--mod-wlan"]="drivers/net/ieee80211 net/ieee80211 drivers/net/mac80211 net/mac80211 drivers/net/wireless net/wireless" \
["--mod-media"]="drivers/media" \
["--mod-gaming"]="drivers/input/gameport drivers/input/joystick" \
["--mod-parport"]="drivers/parport" \
["--mod-extra-networking"]="drivers/telephony drivers/isdn drivers/net/ipx net/ipx drivers/net/x25 net/x25 drivers/net/usb drivers/net/can/usb" \
)

## Defaults
declare -A DEF_INSTALL_MIRROR=(["debian"]="http://ftp.debian.org/debian" ["ubuntu"]="http://archive.ubuntu.com/ubuntu")
DEF_PACKAGES_PROTOTYPE=""
DEF_PACKAGES_CLONE=""
DEF_PACKAGES_DEPLOYMENT=""
DEF_HYPERVISOR=kvm
DEF_CPU=1
DEF_MEMORY=128
DEF_SIZE=1024
DEF_ROOT_FILESYSTEM=ext3
DEF_EV=".blss" # Profile mirror files
DEF_FORMATS="raw"
DEF_DHCP=yes
DEF_IP6=no

# Kernel modules defaults
declare -A DEF_MODS
for cl_opt in ${MODS_CMDLN_OPTS} ; do
  DEF_MODS[$cl_opt]=no ;
done

# process the environment settings
proc_ev() {
  # environment where conf files are located
  mkdir -p "${HOME}/${DEF_EV}"
  ev=${BLSS_ENV:-"${HOME}/${DEF_EV}"}
  ( [ -d "$ev" ] && [ -r "$ev" ] ) || (err "Environment '$ev' doesn't exists or isn't a readable directory" >&2 && exit 1)
}

## Log and error messages
inf() {
  cat << EOT
>>> INFO: $1 >>>
EOT
}
warn() {
  cat << EOT
>>> WARN: $1 >>>
EOT
}
err() {
  cat << EOT
>>> ERROR: $1 >>>
EOT
}
err_non_empty() {
  err "Command line option '$1' requires an non-empty argument"
}
err_non_sup() {
  local cl_opt=$1
  local cf_opt=${cl_opt/--/}
  cf_opt=${cf_opt//-/_}
  err "Command line/conf file option $cl_opt/$cf_opt requires a supported argument. See --help command line option for help"
}
err_non_r() {
  local cl_opt=$1
  local cf_opt=${cl_opt/--/}
  cf_opt=${cf_opt//-/_}
  err "Command line/conf file option $cl_opt/$cf_opt requires an existing-readable file argument. See --help command line option for help"
}
err_rep_value() {
  local cl_opt=$1
  local cf_opt=${cl_opt/--/}
  cf_opt=${cf_opt//-/_}
  err "Command line/conf file option $cl_opt/$cf_opt contains a repeated value in the argument. See --help command line option for help"
}
_stepnum=0
step() {
  cat << EOT
>>> STEP $_stepnum: $1 >>>
>>>
EOT
  _stepnum=$(( $_stepnum + 1 ))
}

## Utils 

# trim leading and ending spaces
trim_spcs() {
  printf "${1#"${1%%[![:space:]]*}"}"
}

# convert form hexadecimal to decimal
hx2dc() {
  bc << EOT
ibase=16; $(echo $1 | tr '[:lower:]' '[:upper:]')
EOT
}

## Regex matching

match_ip() {
  [[ "$1" =~ ^([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])\.([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])\.([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])\.([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])$ ]]
}
match_ip_lst() {
  [[ "$1" =~ ^([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])\.([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])\.([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])\.([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])(,([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])\.([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])\.([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])\.([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5]))*$ ]]
}
match_positive_num() {
  [[ "$1" =~ ^[1-9]+[[:digit:]]*$ ]]
}
match_yesno() {
  [[ "$1" =~ ^(yes|no)$ ]]
}

## Chroot based commands

chr() {
  env \
-u LC_ALL \
LANG="$plang" \
LANGUAGE="$plang_ctry:$pbaselang" \
TZ="$tzon" \
  sudo chroot $wroot $@
}
# Acquire::Check-Valid-Until=false => See http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=595801
apt_get_update() {
  chr << EOT
apt-get -o 'Acquire::Check-Valid-Until=false' update
EOT
}
apt_get_download() {
  chr << EOT
apt-get --yes --force-yes --no-install-recommends --download-only install $@
EOT
}
apt_get_install() {
  bind_dev_proc
  bind_dev_pts
  chr << EOT
export DEBIAN_FRONTEND=noninteractive 
apt-get --yes --force-yes --no-install-recommends install $@
EOT
  unbind_dev_pts
  unbind_dev_proc
}
apt_get_unpack() {
  chr << EOT
export DEBIAN_FRONTEND=noninteractive 
dpkg --unpack /var/cache/apt/archives/${1}_*.deb
EOT
}
apt_get_unpack_all() {
  chr << EOT
export DEBIAN_FRONTEND=noninteractive 
dpkg --unpack /var/cache/apt/archives/*.deb
EOT
}
apt_get_dist_upgrade() {
  bind_dev_proc
  bind_dev_pts
  chr << EOT
export DEBIAN_FRONTEND=noninteractive 
apt-get --yes --force-yes --no-install-recommends dist-upgrade $@
EOT
  unbind_dev_pts
  unbind_dev_proc
}
apt_get_purge() {
  bind_dev_proc
  bind_dev_pts
  chr << EOT
export DEBIAN_FRONTEND=noninteractive 
apt-get --yes --force-yes purge $@ || true
EOT
  unbind_dev_pts
  unbind_dev_proc
}
apt_get_autoremove() {
  bind_dev_proc
  bind_dev_pts
  chr << EOT
apt-get --yes --force-yes autoremove
EOT
  unbind_dev_pts
  unbind_dev_proc
}
apt_get_clean() {
  chr << EOT
apt-get --yes --force-yes clean
EOT
}
apt_get_autoclean() {
  chr << EOT
apt-get --yes --force-yes autoclean
EOT
}

# When use linux-image-server the command depmod fails due to the path
# /var/lib/modules/<kernel name for server version>/.. doesn't exists but
# /var/lib/modules/<kernel name for generic version>/.. exists. Seems to be
# that the command 'uname -r' doesn't prints the correct kernel info to
# STDOUT. For now use the this command instead of 'uname -r'
kver() {
  chr find /boot -maxdepth 1 -type f | grep -m 1 /boot/vmlinuz | sort -r | sed 's/\/boot\/vmlinuz-//'
}

# Copies a first boot script to the bootstrapped system a places an script call
# in /etc/rc.local
cp_firstboot_script() {
  local src="$1"
  if [ -r "$src" ]; then 
    local dst=$2
    [ -z "$dst" ] && dst="$src" || true
    chr << EOT
mkdir -p "$(dirname $dst)"
mkdir -p /var/lib/blss"$(dirname $dst)"
EOT
    sudo cp "$src" "${wroot}${dst}" && inf "Firstboot script copied to '$dst'" 
    chr << EOT
chmod 500 "$dst"
EOT
    chr << EOT
cat >> /etc/rc.local << EOF
if [ ! -e /var/lib/blss"$dst".done ]; then
"$dst"
touch /var/lib/blss"$dst".done
fi
EOF
EOT
  else
    warn "No script file found at '$src'"
  fi
}

# Copies a mirror file to /etc/apt/sources.list.d/ with an unique local name
cp_mirror_file() {
  local mf="$1"
  if [ -r "$mf" ]; then
    # .list files must be directly under /etc/apt/sources.list.d/, so on 
    # directory replaces "/" and " " with "_" to form an unique local name 
    local dst=/etc/apt/sources.list.d/$(dirname "$mf" | tr "/ " "__")_$(basename "$mf" | tr " " "_")  
    sudo cp "$mf" "${wroot}""${dst}" && inf "Copied mirror file at: '$dst'" 
    chr << EOT
chmod a+r "$dst"
EOT
  else
    warn "No mirror file found at '$mf'"
  fi
}

# Disables root remote login through SSH, SCP and SFTP
disable_root_remote() {
  chr << EOT
sed -ie 's/PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config
EOT
  inf "Remote root login is disabled"
}

# Disables root direct loging by changing the login shell
disable_root_direct() {
  chr << EOT
sed -ie 's/\(root:x:0:0:root:\/root:\)\/bin\/bash/\1\/bin\/false/' /etc/passwd
EOT
  inf "Direct root login is disabled"
}

# Enables root password prompt 
enable_root_passwd() {
  chr su -c chpasswd << EOT
root:$ROOTPASSWD
EOT
  inf "Root password prompt was enabled";
}

# setup the hostname
set_hostname() {
  inf "Setting hostname at '/etc/hosts' and '/etc/hostname'"
  [ -z "$ip6" ] && ip6=$DEF_IP6 || true 
  [ $ip6 == "no" ] && comment="## " || unset comment
  chr << EOT
cat > /etc/hosts << EOF
127.0.0.1 localhost.localdomain localhost
127.0.1.1 ${hn}${srch:+" "$hn.$srch}

# The following lines are desirable for IPv6 capable hosts
${comment}::1 $hn${srch:+" "$hn.$srch} localhost6.localdomain6 localhost6
${comment}::1 localhost ip6-localhost ip6-loopback
${comment}fe00::0 ip6-localnet
${comment}ff00::0 ip6-mcastprefix
${comment}ff02::1 ip6-allnodes
${comment}ff02::2 ip6-allrouters
${comment}ff02::3 ip6-allhosts
EOF
cat > /etc/hostname << EOF
$hn
EOF
EOT
}

# setup networking
set_networking() {
  inf "Configuring the loopback network interface"
  chr << EOT
cat > /etc/network/interfaces << EOF
# The loopback network interface
auto lo
iface lo inet loopback
EOF
EOT

  inf "Configuring eth0 network interface"
  if [ "$dyn" == "yes" ] ; then
    chr << EOT
cat >> /etc/network/interfaces << EOF

# The primary network interface
auto eth0
iface eth0 inet dhcp
EOF
EOT
  else
    chr << EOT
cat >> /etc/network/interfaces << EOF

# The primary network interface
auto eth0
iface eth0 inet static
    address $ip
    network $nw
    netmask $msk
EOF
EOT
  fi

  if [ -n "$bcst" ] ; then 
    chr << EOT
cat >> /etc/network/interfaces << EOF
    broadcast $bcst
EOF
EOT
  fi
  if [ -n "$gw" ] ; then
    chr << EOT
cat >> /etc/network/interfaces << EOF
    gateway $gw
EOF
EOT
  fi

# dns-* options are implemented by the resolvconf package, if installed
  if [ -n "$dns" ] ; then 
    chr << EOT
cat >> /etc/network/interfaces << EOF
    dns-nameservers $dns
EOF
EOT
  fi
  if [ -n "$srch" ] ; then 
    chr << EOT
cat >> /etc/network/interfaces << EOF
    dns-search $srch
EOF
EOT
  fi
}

# install user specified packages
install_user_pkgs() {
  step "Install user specified packages"
  if [ -n "$pkgs" ] ; then
    inf "Install user specified packages";
    apt_get_install $pkgs
  else
    inf "No packages to install"
  fi
}

# process locale
proc_lcl() {
  if [ -z "$lcl" ]; then
    host_lang=$(cat /etc/default/locale);
    host_lang=${host_lang#LANG=\"};
    lcl=${host_lang%\"};
  fi
  lcl=$(grep -v "^#.*" /usr/share/i18n/SUPPORTED | egrep -m 1 "$lcl") || ( err_non_sup --locale >&2 && exit 1 )
  plang=${lcl/ */}
  plang_ctry=${plang/.*}
  pbaselang=${plang_ctry/_*/}
}

# process timezone
proc_tzon() {
  tzon=$(find /usr/share/zoneinfo/ -type f -print | sed -e 's/\/usr\/share\/zoneinfo\///' -e 's/posix\///' -e 's/right\///' | egrep -m 1 ^$tzon$) || ( err_non_sup --timezone >&2 && exit 1 )
}

# Import a conf file
imp_conf() {
  local conf="$1"
  if [ -e "$conf"  ] ; then 
    if [ -r "$conf" ] ; then 
      . "$conf" && inf "Imported conf file '$conf'"
    else
      err "Could not import conf file '$conf'" ;
      exit 1;
    fi
  fi
}

## Temporal working directory

tmp_mk() { 
  _tmp=$(mktemp -d) && inf "Created '$_tmp' directory"
}
tmp_rm() {
  sudo rm -rf "$_tmp" && inf "Deleted '$_tmp' directory"
}

## Device handling

bind_dev() {
  sudo mount --bind /dev "$wroot"/dev && inf "Bounded '/dev' device"
}
unbind_dev() {
  sudo umount "$wroot"/dev && inf "Unbounded '/dev' device"
}
bind_dev_proc() {
  sudo mount -t proc proc "$wroot"/proc && inf "Bounded 'proc' device"
}
unbind_dev_proc() {
  sudo umount "$wroot"/proc && inf "Unbounded 'proc' device"
}
bind_dev_pts() {
  sudo mount --bind /dev/pts "$wroot"/dev/pts && inf "Bounded '/dev/pts' device"
}
unbind_dev_pts() {
  sudo umount "$wroot"/dev/pts && inf "Unbounded '/dev/pts' device"
}
bind_devs() {
  bind_dev
  bind_dev_proc
  bind_dev_pts
}
unbind_devs() {
  unbind_dev_pts
  unbind_dev_proc
  unbind_dev
}
# trap cmd to unbind mounted devices on error
_unbind_on_err(){
	local rc=${1:-''}
	if [[ -z "$rc" ]] ; then
		rc=$?
	fi
  unbind_dev_pts || true
  unbind_dev_proc || true
  unbind_dev || true
	local alt_rc=$?
	(( alt_rc != 0 )) && rc=$alt_rc
	trap - INT TERM EXIT
	exit $rc
}

## Module handling

# remove the modules (no blacklist) 
mod_rm() {
  cat << EOF
for mod in $@ ; do
  if modinfo \$mod &>/dev/null ; then   
    rm \$(modinfo -n \$mod) ;
  fi
done
EOF
}

# remove the modules in a directory (no blacklist)
mod_rmdir() {
  cat << EOF
for moddir in $@ ; do
  rm -rf /lib/modules/$(kver)/kernel/\$moddir
done
EOF
}

# remove and blacklist the modules 
mod_purge() {
  cat << EOF
for mod in $@ ; do
  if modinfo \$mod &>/dev/null ; then   
    echo "blacklist \$mod" >> /etc/modprobe.d/floppy.conf ;
    rm \$(modinfo -n \$mod) ;
  fi
done
EOF
}

# purge modules not used very often in server environment 
purge_mods() {
  step "Purge modules"
  chr << EOT
cat >> /etc/modprobe.d/floppy.conf << EOF

# Blacklist modules not used very often in server environment
EOF
EOT

  for mod in $MODS_CMDLN_OPTS ; do
    if [ ${mods[$mod]} == "no" ] ; then
      if [ -n "${MODS_PURGE[$mod]}" ] ; then
        chr << EOT
$(mod_purge ${MODS_PURGE[$mod]})
EOT
      fi
      if [ -n "${MODS_RM[$mod]}" ] ; then
        chr << EOT
$(mod_rm ${MODS_RM[$mod]})
EOT
      fi
      if [ -n "${MODS_RMDIR[$mod]}" ] ; then
        chr << EOT
$(mod_rmdir ${MODS_RMDIR[$mod]})
EOT
      fi
    fi
  done
}

# regenerarte modules.dep
reg_modules_dep() {
  chr << EOT
depmod -a
update-initramfs -u
EOT
}

# cleanup empty modules directories
cleanup_mod_dirs() {
  chr << EOT
find /lib/modules/ -type d -empty -delete
EOT
}

# getting prototype and clone settings
_get_hostname() {
  chr cat /etc/hostname
}
_get_dyn() {
  local dyn=$(chr egrep '^[[:space:]]*iface[[:space:]]+eth0[[:space:]]+inet[[:space:]]+dhcp' /etc/network/interfaces | sed -r 's/iface[[:space:]]+eth0[[:space:]]+inet[[:space:]]+dhcp/yes/')
  echo ${dyn:-no}
}
_get_ip() {
  chr egrep '^[[:space:]]*address[[:space:]]+.*' /etc/network/interfaces | sed -r 's/[[:space:]]*address[[:space:]]+(.*)/\1/'
}
_get_nw() {
  chr egrep '^[[:space:]]*network[[:space:]]+.*' /etc/network/interfaces | sed -r 's/[[:space:]]*network[[:space:]]+(.*)/\1/'
}
_get_msk() {
  chr egrep '^[[:space:]]*netmask[[:space:]]+.*' /etc/network/interfaces | sed -r 's/[[:space:]]*netmask[[:space:]]+(.*)/\1/'
}
_get_bcst() {
  chr egrep '^[[:space:]]*broadcast[[:space:]]+.*' /etc/network/interfaces | sed -r 's/[[:space:]]*broadcast[[:space:]]+(.*)/\1/'
}
_get_gw() {
  chr egrep '^[[:space:]]*gateway[[:space:]]+.*' /etc/network/interfaces | sed -r 's/[[:space:]]*gateway[[:space:]]+(.*)/\1/'
}
_get_dns() {
  chr egrep '^[[:space:]]*dns-nameservers[[:space:]]+.*' /etc/network/interfaces | sed -r 's/[[:space:]]*dns-nameservers[[:space:]]+(.*)/\1/'
}
_get_srch() {
  chr egrep '^[[:space:]]*dns-search[[:space:]]+.*' /etc/network/interfaces | sed -r 's/[[:space:]]*dns-search[[:space:]]+(.*)/\1/'
}
verify_dyn() {
  if [ $(_get_dyn) == "yes" ]; then
   [ -n "$ip" ] && err "--address/address command line/conf file options cannot be specified with DHCP configured" >&2 && exit 1 || true
#  else
#    # --address is mandatory if DHCP is not configured
#    c_address=${c_address:?$(err_non_empty --address)}
  fi
}
get_net_settings() {
  _hn=$(_get_hostname)
  _dyn=$(_get_dyn)
  _ip=$(_get_ip)
  _nw=$(_get_nw)
  _msk=$(_get_msk)
  _bcst=$(_get_bcst)
  _gw=$(_get_gw)
  _dns=$(_get_dns)
  _srch=$(_get_srch)

  inf "Detected hostname = '$_hn'"
  inf "Detected dhcp = '$_dyn'"
  inf "Detected address = '$_ip'"
  inf "Detected network = '$_nw'"
  inf "Detected netmask = '$_msk'"
  inf "Detected broadcast = '$_bcst'"
  inf "Detected gateway = '$_gw'"
  inf "Detected search = '$_srch'"
  inf "Detected nameservers = '$_dns'"
}

proc_net_settings() {
  step "Hostname and network configuration"

  # preserve these settings for the clone
  nw=$_nw
  msk=$_msk
  bcst=$_bcst
  gw=$_gw
  dns=$_dns
  srch=$_srch

  if [ -n "$hn" ] ; then
    set_hostname
  fi

  if [ -n "$ip" ] ; then 
    set_networking
  fi
}

## Libvirt

libvirt() {
  step "Generates libvirt domain XML defininion file"

  # take the first format from the --format/format command line/conf file option   
  lb_disk_fmt=$(printf $fmts)  
  lb_disk_ext=${EXTS_PER_FORMAT[$lb_disk_fmt]}
  lb_disk_drv=${DISKDRIVER_PER_FORMAT[${lb_disk_fmt}]}
  mem_kb=$(( $mem * 1024))
  cat > "$droot"/libvirt.xml << EOT
<domain type='${hyv}'>
  <name>${hn}</name>
  <memory>$mem_kb</memory>
  <vcpu>${vcpu}</vcpu>
  <os>
    <type>hvm</type>
    <boot dev='hd' />
  </os>
  <features>
    <acpi />
  </features>
  <clock offset='utc' />
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
  <devices>
    <emulator>$(which $hyv)</emulator>
    <interface type='bridge'>
      <source bridge='br0' />
    </interface>
    <input type='mouse' bus='ps2' />
    <graphics type='vnc' port='-1' listen='127.0.0.1' />
    <disk type='file' device='disk'>
      <driver name='qemu' type='${lb_disk_drv}' />
      <source file='$(realpath "$droot"/disk.${lb_disk_ext})' />
      <target dev='hda' />
    </disk>
  </devices>
</domain>
EOT
  inf "Generated libvirt domain XML defininion file"
}

