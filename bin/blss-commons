#!/bin/bash
#
# WELCOME TO BLSS
#
# BLSS stands for Bootstrapped Linux-Server Systems, it's a collection of command line tools to
# quickly assemble, without user interaction, multiple small and optimized Linux-Server Systems
# with the purpose of an easy deployment of distributed systems, like Apache Hadoop Cloudera
# Distribution, where every Linux-Server may have a different role in the computational cluster or
# grid.
# With BLSS you can finally verify -with just one Enter key pressing- if your package-based
# system really works when you distribute it, and pay any technical debt you posses with
# yourself not accomplished yet because you donâ€™t have the necessary time for install 10 or 100
# servers coordinating jobs in a network.
# Systems you manage with BLSS scripts fit better for servicing purpose, they are reduced
# in size and have a small memory footprint. The lifecycle of such systems is composed of
# three phases, each one with a corresponding script: prototyping with lxp, cloning with lxc and
# deployment with lxd.
#
# AUTHOR
#   Written by Eduardo Lago Aguilar, eduardo.lago.aguilar@gmail.com

# blss-commons:
#
#   Common functionalities for all blss scripts. Include this script on with the 
# 'source' command.

## Support 
declare -A SUPPORTED_DISTROS=(["debian"]="debian" ["ubuntu"]="ubuntu")
declare -A SUPPORTED_SUITES=(["squeeze"]="squeeze" ["lenny"]="lenny" ["natty"]="natty" ["maverick"]="maverick" ["lucid"]="lucid")
declare -A DISTRO_PER_SUITE=(["lenny"]="debian" ["squeeze"]="debian" ["lucid"]="ubuntu" ["maverick"]="ubuntu"  ["natty"]="ubuntu")
declare -A SUITES_PER_DISTRO=(["debian"]="squeeze, lenny" ["ubuntu"]="natty, maverick, lucid")
declare -A SUPPORTED_ARCHS=(["amd64"]="amd64" ["i386"]="i386")
declare -A SUPPORTED_HYPERVISORS=(["esxi"]="esxi" ["kvm"]="kvm" ["qemu"]="qemu" ["vbox"]="vbox" ["vmserver"]="vmserver" ["vmw6"]="vmw6" ["xen"]="xen")
SUPPORTED_CPU=$(echo {1..32})
declare -A DISTRO_LOCALE_GEN_PATH=(["debian"]="/etc/locale.gen" ["ubuntu"]="/var/lib/locales/supported.d/local")
declare -A SUPPORTED_FILESYSTEMS=(["ext3"]="ext3" ["ext4"]="ext4" ["btrfs"]="btrfs" ["jfs"]="jfs" ["xfs"]="xfs" ["reiserfs"]="reiserfs")
declare -A SUPPORTED_FORMATS=(["raw"]="raw" ["qcow2"]="qcow2")
declare -A EXTS_PER_FORMAT=(["raw"]="img" ["qcow2"]="qcow2")
declare -A GRUB_MODS_PER_FILESYSTEM=(["ext3"]="" ["ext4"]="" ["btrfs"]="" ["jfs"]="jfs" ["xfs"]="xfs" ["reiserfs"]="reiserfs")
declare -A EXTRA_PACKAGES_PER_FILESYSTEM=(["ext3"]="" ["ext4"]="" ["btrfs"]="btrfs-tools" ["jfs"]="jfsutils" ["xfs"]="xfsprogs" ["reiserfs"]="reiserfsprogs")

## Kernel image package per distro and architecture
declare -A DISTRO_LNX_IMG_PKG=(["debian", "amd64"]="linux-image-amd64" ["debian", "i386"]="linux-image-686" ["ubuntu", "amd64"]="linux-image-server" ["ubuntu", "i386"]="linux-image-server")

## Common packages
declare -A EXTRA_PKGS_DISTROS=(["debian"]="" ["ubuntu"]="ubuntu-keyring")
declare -A EXTRA_PKGS_SUITES=(["squeeze"]="readahead-fedora" ["lenny"]=" insserv readahead dash" ["natty"]="readahead-fedora" ["maverick"]="readahead-fedora" ["lucid"]="readahead-fedora")
declare -A READAHEAD_PER_SUITE=(["squeeze"]="readahead-fedora" ["lenny"]="readahead" ["natty"]="readahead-fedora" ["maverick"]="readahead-fedora" ["lucid"]="readahead-fedora")
declare -A ACPI_PER_DISTRO=(["debian"]="acpi-support-base" ["ubuntu"]="acpi")

## Defaults
declare -A DEF_INSTALL_MIRROR=(["debian"]="http://ftp.debian.org/debian" ["ubuntu"]="http://archive.ubuntu.com/ubuntu")
DEF_PACKAGES=""
DEF_HYPERVISOR=kvm
DEF_CPU=1
DEF_MEMORY=128
DEF_SIZE=1024
DEF_ROOT_FILESYSTEM=ext3
DEF_EV=".blss" # Profile mirror files
DEF_FORMATS="raw"
DEF_DHCP=yes
DEF_IP6=no

# process the environment settings
proc_ev() {
  # environment where conf files are located
  mkdir -p "${HOME}/${DEF_EV}"
  ev=${BLSS_ENV:-"${HOME}/${DEF_EV}"}
  ( [ -d "$ev" ] && [ -r "$ev" ] ) || (err "Environment '$ev' doesn't exists or isn't a readable directory" >&2 && exit 1)
}

## Log and error messages
inf() {
  cat << EOT
>>> INFO: $1 >>>
EOT
}
warn() {
  cat << EOT
>>> WARN: $1 >>>
EOT
}
err() {
  cat << EOT
>>> ERROR: $1 >>>
EOT
}
err_non_empty() {
  err "Command line option '$1' requires an non-empty argument"
}
err_non_sup() {
  err "Command line/conf file option --$1/${2:-$1} requires a supported argument. See --help command line option for help"
}
err_non_r() {
  err "Command line/conf file option --${1}/${2:-$1} requires an existing-readable file argument. See --help command line option for help"
}
err_rep_value() {
  err "Command line/conf file option --$1/${2:-$1} contains a repeated value in the argument. See --help command line option for help"
}
_stepnum=0
step() {
  cat << EOT
>>> STEP $_stepnum: $1 >>>
>>>
EOT
  _stepnum=$(( $_stepnum + 1 ))
}

## Utils 

# trim leading and ending spaces
trim_spcs() {
  printf "${1#"${1%%[![:space:]]*}"}"
}

# convert form hexadecimal to decimal
hx2dc() {
  bc << EOT
ibase=16; $(echo $1 | tr '[:lower:]' '[:upper:]')
EOT
}

## Regex matching

match_ip() {
  [[ "$1" =~ ^([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])\.([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])\.([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])\.([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])$ ]]
}
match_ip_lst() {
  [[ "$1" =~ ^([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])\.([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])\.([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])\.([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])(,([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])\.([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])\.([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5])\.([01]?[[:digit:]][[:digit:]]?|2[0-4][[:digit:]]|25[0-5]))*$ ]]
}
match_positive_num() {
  [[ "$1" =~ ^[1-9]+[[:digit:]]*$ ]]
}
match_yesno() {
  [[ "$1" =~ ^(yes|no)$ ]]
}

## Chroot based commands

chr() {
  env \
-u LC_ALL \
LANG="$plang" \
LANGUAGE="$plang_ctry:$pbaselang" \
TZ="$tzon" \
  sudo chroot $wroot $@
}
# Acquire::Check-Valid-Until=false => See http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=595801
apt_get_update() {
  chr << EOT
apt-get -o 'Acquire::Check-Valid-Until=false' update
EOT
}
apt_get_download() {
  chr << EOT
apt-get --yes --force-yes --no-install-recommends --download-only install $@
EOT
}
apt_get_install() {
  bind_dev_proc
  bind_dev_pts
  chr << EOT
export DEBIAN_FRONTEND=noninteractive 
apt-get --yes --force-yes --no-install-recommends install $@
EOT
  unbind_dev_pts
  unbind_dev_proc
}
apt_get_unpack() {
  chr << EOT
export DEBIAN_FRONTEND=noninteractive 
dpkg --unpack /var/cache/apt/archives/${1}_*.deb
EOT
}
apt_get_unpack_all() {
  chr << EOT
export DEBIAN_FRONTEND=noninteractive 
dpkg --unpack /var/cache/apt/archives/*.deb
EOT
}
apt_get_dist_upgrade() {
  bind_dev_proc
  bind_dev_pts
  chr << EOT
export DEBIAN_FRONTEND=noninteractive 
apt-get --yes --force-yes --no-install-recommends dist-upgrade $@
EOT
  unbind_dev_pts
  unbind_dev_proc
}
apt_get_purge() {
  bind_dev_proc
  bind_dev_pts
  chr << EOT
export DEBIAN_FRONTEND=noninteractive 
apt-get --yes --force-yes purge $@ || true
EOT
  unbind_dev_pts
  unbind_dev_proc
}
apt_get_autoremove() {
  bind_dev_proc
  bind_dev_pts
  chr << EOT
apt-get --yes --force-yes autoremove
EOT
  unbind_dev_pts
  unbind_dev_proc
}
apt_get_clean() {
  chr << EOT
apt-get --yes --force-yes clean
EOT
}
apt_get_autoclean() {
  chr << EOT
apt-get --yes --force-yes autoclean
EOT
}

# When use linux-image-server the command depmod fails due to the path
# /var/lib/modules/<kernel name for server version>/.. doesn't exists but
# /var/lib/modules/<kernel name for generic version>/.. exists. Seems to be
# that the command 'uname -r' doesn't prints the correct kernel info to
# STDOUT. For now use the this command instead of 'uname -r'
kver() {
  chr find /boot -maxdepth 1 -type f | grep -m 1 /boot/vmlinuz | sort -r | sed 's/\/boot\/vmlinuz-//'
}

# Copies a first boot script to the bootstrapped system a places an script call
# in /etc/rc.local
cp_firstboot_script() {
  local src="$1"
  if [ -r "$src" ]; then 
    local dst=$2
    [ -z "$dst" ] && dst="$src" || true
    chr << EOT
mkdir -p "$(dirname $dst)"
mkdir -p /var/lib/blss"$(dirname $dst)"
EOT
    sudo cp "$src" "${wroot}${dst}" && inf "Firstboot script copied to '$dst'" 
    chr << EOT
chmod 500 "$dst"
EOT
    chr << EOT
cat >> /etc/rc.local << EOF
if [ ! -e /var/lib/blss"$dst".done ]; then
"$dst"
touch /var/lib/blss"$dst".done
fi
EOF
EOT
  else
    warn "No script file found at '$src'"
  fi
}

# Copies a mirror file to /etc/apt/sources.list.d/ with an unique local name
cp_mirror_file() {
  local mf="$1"
  if [ -r "$mf" ]; then
    # .list files must be directly under /etc/apt/sources.list.d/, so on 
    # directory replaces "/" and " " with "_" to form an unique local name 
    local dst=/etc/apt/sources.list.d/$(dirname "$mf" | tr "/ " "__")_$(basename "$mf" | tr " " "_")  
    sudo cp "$mf" "${wroot}""${dst}" && inf "Copied mirror file at: '$dst'" 
    chr << EOT
chmod a+r "$dst"
EOT
  else
    warn "No mirror file found at '$mf'"
  fi
}

# Disables root remote login trougth SSH, SCP and SFTP
# See http://www.howtogeek.com/howto/linux/security-tip-disable-root-ssh-login-on-linux/
disable_root_remote() {
  chr << EOT
sed -ie 's/PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config
EOT
  inf "Remote root login is disabled"
}

# Disables root direct loging by changing the login shell
# See http://sathyasays.com/2008/10/10/how-to-solution-for-sudo-must-be-setuid-root-problem/
disable_root_direct() {
  chr << EOT
sed -ie 's/\(root:x:0:0:root:\/root:\)\/bin\/bash/\1\/bin\/false/' /etc/passwd
EOT
  inf "Direct root login is disabled"
}

# Enables root password prompt 
enable_root_passwd() {
  chr su -c chpasswd << EOT
root:$ROOTPASSWD
EOT
  inf "Root password prompt was enabled";
}

# setup the hostname
set_hostname() {
  inf "Setting hostname at '/etc/hosts' and '/etc/hostname'"
  [ $ip6 == "no" ] && comment="## " || unset comment
  chr << EOT
cat > /etc/hosts << EOF
127.0.0.1 localhost.localdomain localhost
127.0.1.1 ${hn}${srch:+" "$hn.$srch}

# The following lines are desirable for IPv6 capable hosts
${comment}::1 $hn${srch:+" "$hn.$srch} localhost6.localdomain6 localhost6
${comment}::1 localhost ip6-localhost ip6-loopback
${comment}fe00::0 ip6-localnet
${comment}ff00::0 ip6-mcastprefix
${comment}ff02::1 ip6-allnodes
${comment}ff02::2 ip6-allrouters
${comment}ff02::3 ip6-allhosts
EOF
cat > /etc/hostname << EOF
$hn
EOF
EOT
}

# setup networking
set_networking() {
  inf "Configuring the loopback network interface"
  chr << EOT
cat > /etc/network/interfaces << EOF
# The loopback network interface
auto lo
iface lo inet loopback
EOF
EOT

  inf "Configuring eth0 network interface"
  if [ "$dyn" == "yes" ] ; then
    chr << EOT
cat >> /etc/network/interfaces << EOF

# The primary network interface
auto eth0
iface eth0 inet dhcp
EOF
EOT
  else
    chr << EOT
cat >> /etc/network/interfaces << EOF

# The primary network interface
auto eth0
iface eth0 inet static
    address $ip
    network $nw
    netmask $msk
EOF
EOT
  fi

  if [ -n "$bcst" ] ; then 
    chr << EOT
cat >> /etc/network/interfaces << EOF
    broadcast $bcst
EOF
EOT
  fi
  if [ -n "$gw" ] ; then
    chr << EOT
cat >> /etc/network/interfaces << EOF
    gateway $gw
EOF
EOT
  fi

# dns-* options are implemented by the resolvconf package, if installed
  if [ -n "$dns" ] ; then 
    chr << EOT
cat >> /etc/network/interfaces << EOF
    dns-nameservers $dns
EOF
EOT
  fi
  if [ -n "$srch" ] ; then 
    chr << EOT
cat >> /etc/network/interfaces << EOF
    dns-search $srch
EOF
EOT
  fi
}

# install user specified packages
install_user_pkgs() {
  step "Install user specified packages"
  if [ -n "$pkgs" ] ; then
    inf "Install user specified packages";
    apt_get_install $pkgs
  else
    inf "No packages to install"
  fi
}

# process locale
proc_lcl() {
  if [ -z "$lcl" ]; then
    host_lang=$(cat /etc/default/locale);
    host_lang=${host_lang#LANG=\"};
    lcl=${host_lang%\"};
  fi
  lcl=$(grep -v "^#.*" /usr/share/i18n/SUPPORTED | egrep -m 1 "$lcl") || ( err_non_sup locale >&2 && exit 1 )
  plang=${lcl/ */}
  plang_ctry=${plang/.*}
  pbaselang=${plang_ctry/_*/}
}

# process timezone
proc_tzon() {
  tzon=$(find /usr/share/zoneinfo/ -type f -print | sed -e 's/\/usr\/share\/zoneinfo\///' -e 's/posix\///' -e 's/right\///' | egrep -m 1 ^$tzon$) || ( err_non_sup timezone >&2 && exit 1 )
}

# Import a conf file
imp_conf() {
  local conf="$1"
  if [ -e "$conf"  ] ; then 
    if [ -r "$conf" ] ; then 
      . "$conf" && inf "Imported conf file '$conf'"
    else
      err "Could not import conf file '$conf'" ;
      exit 1;
    fi
  fi
}

## Temporal working directory

tmp_mk() { 
  _tmp=$(mktemp -d) && inf "Created '$_tmp' directory"
}
tmp_rm() {
  sudo rm -rf "$_tmp" && inf "Deleted '$_tmp' directory"
}

## Device handling

bind_dev() {
  sudo mount --bind /dev "$wroot"/dev && inf "Bounded '/dev' device"
}
unbind_dev() {
  sudo umount "$wroot"/dev && inf "Unbounded '/dev' device"
}
bind_dev_proc() {
  sudo mount -t proc proc "$wroot"/proc && inf "Bounded 'proc' device"
}
unbind_dev_proc() {
  sudo umount "$wroot"/proc && inf "Unbounded 'proc' device"
}
bind_dev_pts() {
  sudo mount --bind /dev/pts "$wroot"/dev/pts && inf "Bounded '/dev/pts' device"
}
unbind_dev_pts() {
  sudo umount "$wroot"/dev/pts && inf "Unbounded '/dev/pts' device"
}
bind_devs() {
  bind_dev
  bind_dev_proc
  bind_dev_pts
}
unbind_devs() {
  unbind_dev_pts
  unbind_dev_proc
  unbind_dev
}
# trap cmd to unbind mounted devices on error
_unbind_on_err(){
	local rc=${1:-''}
	if [[ -z "$rc" ]] ; then
		rc=$?
	fi
  unbind_dev_pts || true
  unbind_dev_proc || true
  unbind_dev || true
	local alt_rc=$?
	(( alt_rc != 0 )) && rc=$alt_rc
	trap - INT TERM EXIT
	exit $rc
}

## Module handling

# See http://wiki.debian.org/KernelModuleBlacklisting
#
# NOTE: Some builtin modules like cdrom cannot be removed via modprobe -r, but
# they can be blacklisted
#
# NOTE: The redirection in 'modprobe -r \$mod 2>/dev/null' is due to a WARNING message
# See http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=517954   

# remove and the modules (no blacklist) 
mod_rm() {
  cat << EOF
for mod in $@ ; do
  if modinfo \$mod &>/dev/null ; then   
    rm \$(modinfo -n \$mod) ;
  fi
done
EOF
}

# remove the modules in a directory (no blacklist)
mod_rmdir() {
  cat << EOF
for mod in $(chr find /lib/modules/$(kver)/kernel/$1 -type f -path *.ko -exec basename {} .ko \; 2>/dev/null | awk -v ORS=" " '{NF=NF; print $0}') ; do 
  rm \$(modinfo -n \$mod)
done
EOF
}

# remove and blacklist the modules 
mod_purge() {
  cat << EOF
for mod in $@ ; do
  if modinfo \$mod &>/dev/null ; then   
    echo "blacklist \$mod" >> /etc/modprobe.d/floppy.conf ;
    rm \$(modinfo -n \$mod) ;
  fi
done
EOF
}

# purge base modules not used very often in server environment 
purge_base_mods() {
  chr << EOT
cat >> /etc/modprobe.d/floppy.conf << EOF

# Blacklist modules not used very often in server environment
EOF
$(mod_purge \
  floppy \
  ide-floppy \
  ide-tape \
  cdrom \
  ide_cd_mod \
  snd-pcsp \
  pcspkr \
  psmouse \
  usb-storage \
  usbcore \
  uhci_hcd \
  ehci_hcd)
EOT
}

rm_extra_mods() {
  # firewire
  chr << EOT
$(mod_rm \
  ieee1394 \
  pcilynx \
  ohci1394 \
  video1394 \
  raw1394 \
  sbp2 \
  dv1394 \
  eth1394 \
  firewire-ohci \
  firewire-net \
  firewire-core \
  firewire-sbp2)
rm -f /lib/modules/$(kver)/modules.ieee1394map
EOT

  # atm
  chr << EOT
$(mod_rm \
  zatm \
  uPD98402 \
  ambassador \
  horizon \
  iphase \
  suni \
  fore_200e \
  eni \
  idt77252 \
  solos-pci \
  atmtcp \
  firestream \
  lanai \
  he)
EOT

  # auxdisplay
  chr << EOT
$(mod_rm \
  ks0108 \
  cfag12864b \
  cfag12864bfb)
EOT

  # xen
  chr << EOT
$(mod_rm \
  xen-blkfront \
  xen-netfront \
  netxen_nic \
  xen-kbdfront \
  xen-fbfront \
  xenfs \
  evtchn)
EOT

  # bluetooth
  chr << EOT
$(mod_rm \
  bnep \
  cmtp \
  hidp \
  rfcomm \
  sco \
  l2cap \
  bluetooth \
  toshiba_bluetooth \
  bt3c_cs \
  btmrvl_sdio \
  hci_vhci \
  bluecard_cs \
  bcm203x \
  btsdio \
  dtl1_cs \
  bfusb \
  bpa10x \
  btusb \
  btmrvl \
  btuart_cs \
  ath3k \
  hci_uart)
EOT

  # WM Family
  # WM831x DC-DC Setup Converter, http://www.wolfsonmicro.com/documents/uploads/misc/en/WAN0228.pdf
  # WM8350 Stereo CODEC with Integrated Power Management, http://www.wolfsonmicro.com/products/power_management/WM8350/
  # WM8400 Stereo CODEC with Integrated Power Management, http://www.wolfsonmicro.com/products/power_management/WM8400/
  # WM8739) # Stereo ADC, http://www.wolfsonmicro.com/products/adcs/WM8739/
  # WM8775) # Stereo ADC with 4 input selector, http://www.wolfsonmicro.com/products/adcs/WM8775/
  # WM8994 Multi-Channel CODEC with 3 digital audio interfaces, http://www.wolfsonmicro.com/products/audio_hubs/WM8994/
  # WM97xx Touchscreen, etc, http://www.wolfsonmicro.com/media_centre/item/wolfson_unleashes_dual_codec/
  chr << EOT
$(mod_rm \
  leds-wm831x-status \
  leds-wm8350 \
  wm831x_backup \
  wm831x_bl \
  wm831x-dcdc \
  wm831x-gpio \
  wm831x-hwmon \
  wm831x-isink \
  wm831x-ldo \
  wm831x-on \
  wm831x_power \
  wm831x_wdt \
  wm8350-gpiolib \
  wm8350-hwmon \
  wm8350_power \
  wm8350-regulator \
  wm8350_wdt \
  wm8400-core \
  wm8400-regulator \
  wm8739 \
  wm8775 \
  wm8994-gpio \
  wm8994-regulator \
  wm97xx-ts)
EOT

  # leds
  chr << EOT
$(mod_rm \
  leds-alix2 \
  leds-mc13783 \
  leds-net5501 \
  ledtrig-backlight \
  leds-88pm860x \
  ledtrig-heartbeat \
  leds-bd2802 \
  leds-ss4200 \
  ledtrig-default-on \
  leds-lp3944 \
  leds-dac124s085 \
  ledtrig-gpio \
  leds-da903x \
  led-class \
  leds-gpio \
  dell-led \
  leds-pca9532 \
  leds-pca955x \
  leds-lt3593 \
  ledtrig-timer \
  leds-regulator \
  leds-adp5520)
EOT

  # memstick
  chr << EOT
$(mod_rm \
  memstick \
  mspro_block \
  jmb38x_ms \
  tifm_ms)
EOT

  # mfd: Multi-Function Device
  # # Silicon Motion SM501
  # TODO: Verify these modules
  chr << EOT
$(mod_rm \
  sm501 \
  pcf50633-adc \
  htc-pasic3 \
  rdc321x-southbridge \
  janz-cmodio \
  ab3100-otp \
  ucb1400_core \
  lpc_sch \
  mc13783-core \
  timberdale \
  pcf50633-gpio \
  tps65010 \
  pcf50633 \
  tps6507x)
EOT

  # mmc: MultiMediaCard subsystem, http://www.kernel.org/doc/Documentation/mmc/
  chr << EOT
$(mod_rm \
  sdio_uart \
  mmc_block \
  via-sdmmc \
  sdhci-pltfm \
  mmc_spi \
  tifm_sd \
  sdhci \
  cb710-mmc \
  sdhci-pci \
  wbsd \
  sdricoh_cs)
EOT

  # regulator: Regulator, http://www.kernel.org/doc/htmldocs/regulator.html
  chr << EOT
$(mod_rm \
  mc13783-regulator \
  bq24022 \
  tps65023-regulator \
  virtual \
  tps6507x-regulator \
  max1586 \
  max8649 \
  max8660 \
  max8925-regulator \
  lp3971 \
  da903x \
  ab3100 \
  pcf50633-regulator \
  userspace-consumer)
EOT

  # uwb: Linux Ultra-Wide-Band stack, as well as drivers for Wireless USB Host Controller drivers, http://www.linuxuwb.org/thewiki/Linux-UWB+WUSB+WiNET
  chr << EOT
$(mod_rm \
  wlp \
  i1480-dfu-usb \
  i1480u-wlp \
  i1480-est \
  whc-rc \
  hwa-rc \
  umc \
  uwb \
  whci)
EOT
}

# remove other various module directories
rm_various_mod_dirs() {
  # more drastically remove
  chr << EOT
$(mod_rmdir drivers/media)
$(mod_rmdir drivers/cdrom)
$(mod_rmdir drivers/input/gameport)
$(mod_rmdir drivers/input/joystick)
$(mod_rmdir drivers/input/mouse)
$(mod_rmdir drivers/input/touchscreen)
$(mod_rmdir drivers/parport)
$(mod_rmdir drivers/telephony)
$(mod_rmdir sound)
$(mod_rmdir drivers/isdn)
$(mod_rmdir drivers/usb)
$(mod_rmdir drivers/net/bluetooth)
$(mod_rmdir net/bluetooth)
$(mod_rmdir drivers/net/ieee80211)
$(mod_rmdir net/ieee80211)
$(mod_rmdir drivers/net/ipx)
$(mod_rmdir net/ipx)
$(mod_rmdir drivers/net/mac80211)
$(mod_rmdir net/mac80211)
$(mod_rmdir drivers/net/wireless)
$(mod_rmdir net/wireless)
$(mod_rmdir drivers/net/x25)
$(mod_rmdir net/x25)
$(mod_rmdir drivers/net/usb)
$(mod_rmdir drivers/net/can/usb)
$(mod_rmdir drivers/ieee1394)
$(mod_rmdir drivers/firewire)
EOT
}

# regenerarte modules.dep
reg_modules_dep() {
  chr << EOT
depmod -a
update-initramfs -u
EOT
}

# cleanup empty modules directories
cleanup_mod_dirs() {
  chr << EOT
find /lib/modules/ -type d -empty -delete
EOT
}

