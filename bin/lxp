#!/bin/bash -e

# === WELCOME ===
# 
# BLSS stands for Bootstrapped Linux Server Systems, it is set of tools to quickly 
# assemble multiple small & optimized Linux-based virtual appliances with the 
# purpose of an easy deployment of package-based distributed systems, like Apache 
# Hadoop Cloudera Distribution, where every server have a different role in a 
# computational cluster or grid. 
# 
# The delivered virtual appliances fit better for servicing purpose, they are 
# reduced in size and have a small memory footprint. The lifecycle of such systems 
# is composed of three phases: prototyping, where shared packages & configuration 
# is settled; cloning, where different server roles are defined; and finally 
# deployment where unique appliances are produced.
# 
# The project is hosted at https://bitbucket.org/eduardo_lago_aguilar/blss
# 
# === AUTHOR ===
#   Written by Eduardo Lago Aguilar, eduardo.lago.aguilar@gmail.com, 
#   http://eduardo-lago.blogspot.com

# lxp:
#
#   Prototype creation. Run this script with --help for details.

# Resolve script location, $0 may be a link
script="$0"
# Need this for relative symlinks
while [ -h "$script" ] ; do
  lst=$(ls -ld "$script")
  lnk=$(expr "$lst" : '.*-> \(.*\)$')
  if expr "$lnk" : '/.*' > /dev/null; then
    script="$lnk"
  else
    script=$(dirname "$script")/"$lnk"
  fi
done
BLSS_HOME=$(dirname "$script")/..
BIN="$BLSS_HOME"/bin
ENV="$BLSS_HOME"/env
EXT="$BLSS_HOME"/ext
TST="$BLSS_HOME"/tst

. "$BIN"/blss-commons

usage() {
  local IFS=","
  cat << EOF
NAME
  lxp - Bootstraps a Linux Server System prototype with a reduced size and small memory footprint requirements for servicing purposes.

SYNOPSIS
  lxp [GENERAL OPTIONS] [NETWORKING OPTIONS] [ADMIN USER OPTIONS] [ROOT OPTIONS] [MODULES OPTIONS] PROTO_ROOT

DESCRIPTION
  BLSS stands for Bootstrap Linux Server System, it can be used to Bootstraps a Linux Server system with a reduced size and small memory footprint requirements for servicing purposes. It uses Debian debootstrap script to automatically install the system from a repository or closer mirror without any user interaction to a target directory called PROTO_ROOT. To save disk space, additional cleanup is performed once the system has been installed. When the installation is finished, the prototype an be cloned and later used to create a virtual appliance.

  PROTO_ROOT command line/conf file options is mandatory and shall be an existing empty directory.

NOTES
  i) The script performs several sudo <command> executions, you can append, AT YOUR OWN RISK, entries to the host '/etc/sudoers' archive and avoid repeatedly password typing during execution. It can be also useful when the script is executed with a daemon/service account. Example content appended to host '/etc/sudoers':

  # User privilege specification without password prompt
  mydaemon ALL=NOPASSWD: ALL

  # Members of the admin group may gain root privileges plus no password prompt
  %admin ALL=NOPASSWD: ALL

  ii) It is recommended to leave the root password locked under Linux, not allowing login with the root account. To run administrative commands use sudo command, sudo allows an authorized user to execute a command as the superuser.

  iii) Once installed the locales and timezone, the remaining locales and timezones are deleted from the system to save space. 

  iv) By default, several modules are removed from the bootstrapped system once get installed. The list includes among others: floppy, cd-rom, snd-pcsp (sound), pcspkr (beep), mouse, usb, wireless, gameport, joystick, touchscreen, parport, telephony, isdn, bluetooth, ieee80211, ipx, mac80211, wireless, x25, firewire, etc...

GENERAL OPTIONS
  --help
    Show this help

  --suite SUITE
    The suite type. Possible values for Debian-based system are: ${SUITES_PER_DISTRO["debian"]}; for Ubuntu-based system: ${SUITES_PER_DISTRO["ubuntu"]}. SUITE defaults to host distribution suite. See 'lsb_release' command.

  --architecture ARCHITECTURE
    The architecture type. Supported architectures are ${SUPPORTED_ARCHS[*]}. Defaults to host architecture. See 'dpkg-architecture' command.

  --install-mirror INSTALL_MIRROR
    The mirror base URL to be used on bootstrapping. For Debian defaults to ${DEF_INSTALL_MIRROR["debian"]}, for Ubuntu defaults to ${DEF_INSTALL_MIRROR["ubuntu"]}.

  --mirror-file MIRROR_FILE
    An extra mirrors file located at MIRROR_FILE to include in '/etc/apt/sources.list.d/'. The script also check the existence of additional mirrors files at '~/${DEF_EV}/mirrors.list', '~/${DEF_EV}/DISTRO/mirrors.list' and '~/${DEF_EV}/DISTRO/SUITE/mirrors.list' for inclusion in '/etc/apt/sources.list.d/'. Examples of such files:

    Debian, security and volatile repository mirror:

    # ~/${DEF_EV}/debian/lenny/mirrors.list
    deb http://repository/mirror/debian/debian lenny main contrib non-free
    deb http://repository/mirror/debian/debian-security lenny/updates main contrib non-free
    deb http://repository/mirror/debian/debian-volatile lenny/volatile main contrib non-free

    A home localized Ubuntu repository mirror:

    # ~/${DEF_EV}/ubuntu/mirrors.list
    deb http://repository.home.dev/ubuntu maverick main restricted universe multiverse

  --locale LOCALE
    Supported locale. Defaults to the host locale. Example values: 'en_US.UTF-8 UTF-8', 'nl_NL.UTF-8 UTF-8' and 'es_ES.UTF-8 UTF-8'. See '/usr/share/i18n/SUPPORTED' for the complete list of possible values. See 'locale' command.

  --timezone TIMEZONE
    Supported time zone. Defaults to host timezone located at '/etc/timezone'. For any Linux distribution '/etc/localtime' is a symlink to the correct timezone file or is the effective timezone file. The file '/etc/timezone' is used by 'dpkg-reconfigure tzdata' command to generate (or symlink) the effective timezone file at '/etc/localtime'. Timezone files are located at '/usr/share/zoneinfo/'. Examples TIMEZONE values are: 'America/New_York', 'Europe/Amsterdam' and 'America/Havana'. See 'tzselect' and 'dpkg-reconfigure tzdata' commands.

  --first-boot-script FIRST_BOOT_SCRIPT
    An extra script file to be executed on first boot. The path is in the host filesystem. This command also check the existence of additional first boot script files at '~/${DEF_EV}/firstboot.sh', '~/${DEF_EV}/DISTRO/firstboot.sh', and '~/${DEF_EV}/DISTRO/SUITE/firstboot.sh' for including on first boot execution process. Examples of such files are:

    # ~/${DEF_EV}/firstboot.sh
    apt-get update
    apt-get --force-yes -y install mc

  --packages PACKAGES
    Space separated list of packages to install after bootstrapping. Defaults to '${DEF_PACKAGES_PROTOTYPE}'. Example package list is: 'nginx  apache2 mysql couchdb'.

NETWORKING OPTIONS
  Networking is mandatory for servicing, therefore there are serveral possible options combinations for networking configuration. See the list below:   

---------------------------------------------------------------------------
 command line                                           |NC|AA|DS|SS|BC|GW|
---------------------------------------------------------------------------
 --dhcp yes                                             |y |y |? |? |? |? | 
---------------------------------------------------------------------------
 --dhcp yes (named)                                     |y |y |y |? |? |? |
---------------------------------------------------------------------------
 --dhcp yes (named) (suffixed)                          |y |y |y |y |? |? |
---------------------------------------------------------------------------
 --dhcp no (fixed)                                      |y |n |n |n |n |n |
---------------------------------------------------------------------------
 --dhcp no (fixed) (named)                              |y |n |y |n |n |n |
---------------------------------------------------------------------------
 --dhcp no (fixed) (named) (suffixed)                   |y |n |y |y |n |n |
---------------------------------------------------------------------------
 --dhcp no (fixed) (casted)                             |y |n |n |n |y |n |
---------------------------------------------------------------------------
 --dhcp no (fixed) (routed)                             |y |n |n |n |n |y |
---------------------------------------------------------------------------
 --dhcp no (fixed) (casted) (routed)                    |y |n |n |n |y |y |
---------------------------------------------------------------------------
 --dhcp no (fixed) (named) (casted)                     |y |n |y |n |y |n |
---------------------------------------------------------------------------
 --dhcp no (fixed) (named) (routed)                     |y |n |y |n |n |y |
---------------------------------------------------------------------------
 --dhcp no (fixed) (named) (casted) (routed)            |y |n |y |n |y |y |
---------------------------------------------------------------------------
 --dhcp no (fixed) (named) (suffixed) (casted)          |y |n |y |y |y |n |
---------------------------------------------------------------------------
 --dhcp no (fixed) (named) (suffixed) (routed)          |y |n |y |y |y |n |
---------------------------------------------------------------------------
 --dhcp no (fixed) (named) (suffixed) (casted) (routed) |y |n |y |y |y |y |
---------------------------------------------------------------------------

  fixed:--address 192.168.1.1 --network 192.168.0.0 --netmask 255.255.0.0, named:--nameservers 192.168.0.2, suffixed:--search home.dev, routed:--gateway 192.168.0.1, casted:--broadcast 192.168.255.255

  NC:network configured, AA:configured for automatic address assigning via DHCP, DS:DNS server configured for queriying domain names, SS:configured for suffixing names in domain name queries, BC: broadcasting configured, GW: gateway configured

  y:yes, n:no, x:does not matter, ?:depends on the settings of the DHCP server available in the network
  
  --hostname HOSTNAME
    The proto hostname. Defaults to DISTRO-SUITE-ARCHITECTURE. The hostname can be changed later.     

  --dhcp yes|no
    Configure the network with automatic DHCP settings. If the argument is 'yes', then  --address, --network, --netmask, --broadcast and --gateway options are excluded. But can be optinally used among the --search and --nameservers options. An argument equal to 'no' results in no installation of package 'dhcp3-client'. Defaults to ${DEF_DHCP}.

  --address IPADDRESS
    Static IP address. This option shall be specified among --network and --netmask options, this option excludes --dhcp option. But can be optinally used among the --search and/or --nameservers options. Defaults no static IP address assigning.     

  --network NETWORK
    Static network address. This option shall be specified among --address and --netmask options, this option excludes --dhcp option. But can be optinally used among the --search and/or --nameservers options. Defaults to no static network address assigning.     

  --netmask NETMASK
    Static network mask. This option shall be specified among --address and --network options, this option excludes --dhcp option. But can be optinally used among the --search and/or --nameservers options. Defaults to no static netmask assigning.     

  --broadcast BROADCAST
    Static broadcast address. This option excludes --dhcp option and if specified then the options --address, --network and --netmask shall be present too. Defaults to no broadcasting.     

  --gateway GATEWAY
    Static gateway IP address. This option excludes --dhcp option and if specified then the options --address, --network and --netmask shall be present too. Defaults to no gateway.

  --search SEARCH
    Optional DNS search suffix. If specified then either --dhcp option or the group of options --address, --network and --netmask shall be present too. Defaults to no DNS search suffix.  

  --nameservers NAMESERVERS
    Optional comma separated list of DNS server IP addresses. If specified then either --dhcp option or the group of options --address, --network and --netmask shall be present too. Defaults to no nameservers.

  --ntpservers NTPSERVERS
    Optional space separated list of NTP server IP addresses or host names. Defaults to no ntpservers.

  --ip6 yes|no
    Support for IPv6 protocol. Defaults to ${DEF_IP6}.

ADMIN USER OPTIONS
  --admin-user ADMIN_USER
    The account ADMIN_USER is created and added to group admin. ADMIN_USER defaults to guest distribution id in lowercase (See 'lsb_release' command). ADMIN_USER can execute a command as the superuser via sudo. See '/etc/sudoers'.

  --admin-full-name ADMIN_FULL_NAME
    The adim user full name. ADMIN_FULL_NAME defaults to guest distribution id in lowercase. See 'lsb_release' command.

  --admin-password ADMIN_PASSWORD
    The admin user password. ADMIN_PASSWORD defaults to guest distribution id in lowercase. See 'lsb_release' command.

ROOT OPTIONS
  By disabling both root remote login (trougth SSH, SCP and SFTP) and direct login you can avoid brute force attacks. But, if you really need root remote/direct login, then password prompt is another security issue to take into account. This command provides four possible combinations for root remote/direct login with/without password:

----------------------------------------------------
 command line                          |RL |DL |PP |
----------------------------------------------------
 (nothing)                             |no |no |X  |
----------------------------------------------------
 --root-password xyz --remote-root no  |no |yes|yes|
----------------------------------------------------
 --root-password -   --remote-root no  |no |yes|no |
----------------------------------------------------
 --root-password xyz --remote-root yes |yes|yes|yes|
----------------------------------------------------

  or the equivalent in a conf file:

--------------------------------
 conf file content |RL |DL |PP |
--------------------------------
 (nothing)         |no |no |x  |
--------------------------------
 root_password=xyz |no |yes|yes|
 remote_root=no    |   |   |   |
--------------------------------
 root_password=-   |no |yes|no |
 remote_root=no    |   |   |   |
--------------------------------
 root_password=xyz |yes|yes|yes|
 remote_root=yes   |   |   |   |
--------------------------------

  RL:remote login, DL:direct login, PP:password prompt, x:does not matter, -: an special value to indicate no password prompt

    Note that remote login wihtout password prompt is not permitted. It is recommended to use the root default options (both remote and direct login disabled) and setup another user that will have root capabilities to perform admin tasks. See ADMIN USER OPTIONS.

  --root-password [ROOT_PASSWORD]
    Setup the root password. When a valid value is specified then the password is prompted on login and the --remote-root option can be should be equal to 'yes' or 'no'. When the special value '-' is specified then the password is never prompted on login, therefore the --remote-root option shall be equal to 'no'. 
      
  --remote-root yes|no
    Setup the remote login for root. If the value of this option is 'yes' then --root-password shall be a valid password. 

MODULES OPTIONS
$(mods_usage)

    More about modules at: https://bitbucket.org/eduardo_lago_aguilar/blss/wiki/Modules

EXAMPLES

  1- An Ubuntu Maverick proto with amd64 architecture, locale English US, timezone in New York and DHCP network configuration:
 
    \$ lxp --suite maverick --architecture amd64 --locale "en_US.UTF-8 UTF-8" --timezone America/New_York --hostname ny-server --dhcp yes /tmp/ny-server-proto

  2- An Ubuntu Maverick proto with amd64 architecture, locale Netherlands, timezone in Amsterdam and static network configuration
 
    \$ lxp --suite maverick --architecture amd64 --locale "nl_NL.UTF-8 UTF-8" --timezone Europe/Amsterdam --hostname nl-server --dhcp no --address 192.168.0.111 --network 192.168.0.0 --netmask 255.255.0.0 --broadcast 192.168.255.255 --gateway 192.168.0.1  /tmp/nl-server-proto

  3- A Debian Lenny proto with host architecture, host locale, host timezone, DHCP network configuration and specific user settings:
 
    \$ lxp --suite lenny --dhcp yes --admin-user adm --admin-full-name Administrator --admin-password adm  /tmp/debian-server-proto

  More examples of usage on the wiki: https://bitbucket.org/eduardo_lago_aguilar/blss/wiki/Home

AUTHOR
  Written by Eduardo Lago Aguilar, eduardo.lago.aguilar@gmail.com. Project hosted at https://bitbucket.org/eduardo_lago_aguilar/blss

EOF
}

# parse command line options
#
# NOTE:
#   - c_ prefix indicates a command line option
#   - without c_ prefix indicates a conf file option
#   - short name indicates the effective option

# Quotes around `"$@"' let each cmd-line parameter expand to a separate word. 
# TEMP variable is necessary, as the `eval set --' would nuke the return value 
# of getopt.
set +e
TEMP=$(getopt -n 'lxp' -o '' --longoptions \
help,\
suite:,\
architecture:,\
install-mirror:,\
mirror-file:,\
locale:,\
timezone:,\
first-boot-script:,\
packages:,\
hostname:,\
dhcp:,\
address:,\
network:,\
netmask:,\
broadcast:,\
gateway:,\
search:,\
nameservers:,\
ntpservers:,\
ip6:,\
admin-user:,\
admin-full-name:,\
admin-password:,\
root-password:,\
remote-root:,\
mod-floppy:,\
mod-tape:,\
mod-cdrom:,\
mod-sound:,\
mod-mouse:,\
mod-usb:,\
mod-firewire:,\
mod-atm:,\
mod-auxdisplay:,\
mod-xen:,\
mod-bluetooth:,\
mod-wolfsonmicro:,\
mod-leds:,\
mod-memstick:,\
mod-multi-function-device:,\
mod-multi-media-card:,\
mod-regulator:,\
mod-ultra-wide-band:,\
mod-wlan:,\
mod-media:,\
mod-gaming:,\
mod-parport:,\
mod-extra-networking: \
-- "$@")
if [ $? != 0 ] ; then 
  usage >&2 ; 
  exit 1 ; 
fi
set -e

# quotes around `$TEMP' are essential
eval set -- "$TEMP"

# unset c_* options
unset \
  c_suite \
  c_architecture \
  c_install_mirror \
  c_mirror_file \
  c_locale \
  c_timezone \
  c_first_boot_script \
  c_packages \
  c_hostname \
  c_dhcp \
  c_address \
  c_network \
  c_netmask \
  c_broadcast \
  c_gateway \
  c_search \
  c_nameservers \
  c_ntpservers \
  c_ip6 \
  c_admin_user \
  c_admin_full_name \
  c_admin_password \
  c_root_password \
  c_remote_root \
  c_mods \
  c_proto_root

declare -A c_mods 
declare -A c_os 
root_defaults_flag=1
while true; do
  # flags an option if appears in the command line, options can be specified 
  # only once
  (( c_os[$1] == 1 )) && err "$1 command line option was already specified" && usage >&2 && exit 1 ; 
  c_os[$1]=1 ;
  case $1 in
  --help)
      usage && shift && exit 0 ;;
  --suite)
      c_suite=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
  --architecture)
      c_architecture=${2:?$(err_non_empty $1)} ; 
      shift 2 ;;
  --install-mirror)
      c_install_mirror=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
  --mirror-file)
      c_mirror_file=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
  --locale)
      c_locale=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
  --timezone)
      c_timezone=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
  --first-boot-script)
      c_first_boot_script=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
  --packages)
      c_packages=${2:?$(err_non_empty $1)} ; 
      shift 2 ;;
  --hostname)
      c_hostname=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
  --dhcp)
      c_dhcp=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
  --address)
      c_address=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
  --network)
      c_network=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
  --netmask)
      c_netmask=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
  --broadcast)
      c_broadcast=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
  --gateway)
      c_gateway=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
  --search)
      c_search=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
  --nameservers)
      c_nameservers=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
  --ntpservers)
      c_ntpservers=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
  --ip6)
      c_ip6=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
  --admin-user)
      c_admin_user=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
  --admin-full-name)
      c_admin_full_name=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
  --admin-password)
      c_admin_password=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
  --root-password)
      c_root_password=${2:?$(err_non_empty $1)} ; 
      shift 2 ; # In quoted mode an empty parameter will be generated if its optional argument is not found.
      unset root_defaults_flag ;;
  --remote-root)
      c_remote_root=${2:?$(err_non_empty $1)} ;
      shift 2 ;
      unset root_defaults_flag ;;
  --) 
    shift ; 
    break ;;
  *) 
    if [ -n "${MODS_CONF_OPTS[$1]}" ] ; then
      c_mods[$1]=${2:?$(err_non_empty $1)}
    else
      err "Error parsing arguments" && usage >&2 && exit 1
    fi
    shift 2 ;;
  esac
done
# proto root is the remaining
c_proto_root=$(trim_spcs "$@")
if [ -n "$c_proto_root" ] ; then
  c_proto_root=$(realpath "$c_proto_root") || ( err "PROTO_ROOT/proto_root command line/conf file option shall be an existing empty directory" >&2 && exit 1 )
fi
unset c_os

proc_ev

# unset conf file options before start importing from environment
unset \
  suite \
  architecture \
  install_mirror \
  mirror_file \
  locale \
  timezone \
  first_boot_script \
  packages \
  hostname \
  dhcp \
  address \
  network \
  netmask \
  broadcast \
  gateway \
  search \
  nameservers \
  ntpservers \
  ip6 \
  admin_user \
  admin_full_name \
  admin_password \
  root_password \
  remote_root \
  proto_root 

for cf_opt in ${MODS_CONF_OPTS[*]} ; do 
  eval "unset $cf_opt" 
done

# import general env opts
imp_conf "$ev"/lxp.conf

# suite: command line may override the value imported from the environment, if 
# the option is missing use the host value, finally verify if the value is 
# supported.
st=${c_suite:-$suite}
st=${st:-$(lsb_release -cs)}
st=${SUPPORTED_SUITES[$st]}
st=${st:?$(err_non_sup --suite)}

# distro: depends on the suite
dtr=${DISTRO_PER_SUITE[$st]}

# once distro & suite, import other possible conf file opts from env 
imp_conf "$ev"/$dtr/lxp.conf
imp_conf "$ev"/$dtr/$st/lxp.conf

# architecture: command line may override the value imported from the 
# environment, if the option is missing use the host value, finally verify if 
# the value is supported.    
arch=${c_architecture:-$architecture} 
arch=${arch:-$(dpkg-architecture -qDEB_HOST_ARCH)}
arch=${SUPPORTED_ARCHS[$arch]}
arch=${arch:?$(err_non_sup --architecture)}

# install_mirror: command line may override the value imported from the 
# environment, if the option is missing use the default mirror per distro.    
im=${c_install_mirror:-$install_mirror}
im=${im:-${DEF_INSTALL_MIRROR[$dtr]}}

# mirror_file: command line may override the value imported from the environment
mf=${c_mirror_file:-$mirror_file}
if [ -n "$mf" ] ; then
  mf=$(realpath "$mf") && [ -r "$mf" ] && [ -f "$mf" ] || ( err_non_r --mirror-file >&2 && exit 1 )
fi

# locale: command line may override the value imported from the environment, if 
# the option is missing use the host value, finally verify if the value is 
# supported.
#
# additionally extracts other useful values from locale: plang, plang_ctry & 
# pbaselang. Example:
#
# if locale == "en_US.UTF-8 UTF-8" 
#   then 
#     plang = "en_US.UTF-8"
#     plang_ctry = "en_US"
#     pbaselang = "en"
lcl=${c_locale:-$locale}
proc_lcl

# locale: command line may override the value imported from the environment, if 
# the option is missing use the host value, finally verify if the value is 
# supported.
tzon=${c_timezone:-$timezone}
tzon=${tzon:-$(cat /etc/timezone)}
proc_tzon

# first_boot_script: command line may override the value imported from the 
# environment
fbscript=${c_first_boot_script:-$first_boot_script}
if [ -n "$fbscript" ] ; then
  fbscript=$(realpath "$fbscript") && [ -r "$fbscript" ] && [ -f "$fbscript" ] || ( err_non_r --first-boot-script >&2 && exit 1 )
fi

# packages: command line may override the value imported from the environment, 
# if the option is missing use the default value
pkgs=${c_packages:-$packages}
pkgs=${pkgs:-${DEF_PACKAGES_PROTOTYPE}}

# hostname: command line may override the value imported from the environment, 
# if the option is missing use the default value based on distro, suite and 
# architecture
hn=${c_hostname:-$hostname}
hn=${hn:-${dtr}"-"${st}"-"${arch}}

# dhcp, address, network, netmask, broadcast, gateway, search, nameservers and 
# ntpservers cmd line may override the values imported from the environment, 
# finally verify the invalid networking combinations. dhcp defaults to 'yes' if 
# no specified
dyn=${c_dhcp:-$dhcp}
if [ -n "$dyn" ] ; then 
  dyn=${dyn,,} ;
  match_yesno $dyn || ( err_non_sup --dhcp >&2 && exit 1 );
else
  dyn=$DEF_DHCP
fi
ip=${c_address:-$address}
nw=${c_network:-$network}
msk=${c_netmask:-$netmask}
bcst=${c_broadcast:-$broadcast}
gw=${c_gateway:-$gateway}
srch=${c_search:-$search}
dns=${c_nameservers:-$nameservers}
ntp=${c_ntpservers:-$ntpservers}

# ip6: command line may override the value imported from the environment, 
# if the option is missing use the default value 
ip6=${c_ip6:-$ip6}
if [ -n "$ip6" ] ; then 
  ip6=${ip6,,} ;
  match_yesno $ip6 || ( err_non_sup --ip6 >&2 && exit 1 );
else
  ip6=$DEF_IP6
fi

if [ $dyn == "yes" ] ; then
  ( \
     [ -n "$ip" ] \
  || [ -n "$nw" ] \
  || [ -n "$msk" ] \
  || [ -n "$bcst" ] \
  || [ -n "$gw" ] \
  ) && err "--dhcp/dhcp=yes command line/conf file option excludes --address/address, --network/network, --netmask/netmask, --broadcast/broadcast and --gateway/gateway command line/conf file options" >&2 && exit 1 || true
else
  ( \
     [ -z "$ip" ] \
  || [ -z "$nw" ] \
  || [ -z "$msk" ] \
  ) && err "--dhcp/dhcp=no command line/conf file option shall be specified among --address/address, --network/network and --netmask/netmask command line/conf file options" >&2 && exit 1 || true ;
  match_ip $ip || ( err_non_sup --address >&2 && exit 1 ) ;
  match_ip $nw || ( err_non_sup --network >&2 && exit 1 ) ;
  match_ip $msk || ( err_non_sup --netmask >&2 && exit 1 ) ;
fi
[ -n "$bcst" ] && ! match_ip $bcst && err_non_sup --broadcast >&2 && exit 1 || true
[ -n "$gw" ] && ! match_ip $gw && err_non_sup --gateway >&2 && exit 1 || true
[ -n "$dns" ] && ! match_ip_lst $dns && err_non_sup --nameservers >&2 && exit 1 || true

# admin_user, admin_full_name & admin_password: command line may override the 
# values imported from the environment, if the options are missing use the 
# default value based on the distro
admusr=${c_admin_user:-$admin_user}
admusr=${admusr:-$dtr}
admname=${c_admin_full_name:-$admin_full_name}
admname=${admname:-${dtr^}}
admpwd=${c_admin_password:-$admin_password}
admpwd=${admpwd:-$dtr}

# root_password / remote_root: command line may override the values imported 
# from the environment, finally verify the invalid root combinations
( [ -n "$root_password" ] || [ -n "$remote_root" ] ) && unset root_defaults_flag || true

if ! (( root_defaults_flag == 1 )) ; then
  
  rootpwd=${c_root_password:-$root_password}      
  [ -z "$rootpwd" ] && err "--root-password/root_password command line/conf file option is missing" >&2 && exit 1 || true 

  remroot=${c_remote_root:-$remote_root}
  [ -z "$remroot" ] && err "--remote-root/remote_root command line/conf file option is missing" >&2 && exit 1 || true 

  if [ -n "$remroot" ] ; then 
    remroot=${remroot,,} ;
    [ "$remroot" != "yes" ] && [ "$remroot" != "no" ] && err_non_sup --remote-root >&2 && exit 1 || true ;
  fi  

  [ $remroot == "yes" ] && [ $rootpwd = "-" ] && err "--remote-root/remote_root=yes command line/conf file option shall be used with non-empty --root-password/root_password different to the special argument '-'" >&2 && exit 1 || true
fi

# proto_root: command line may override the values imported from the 
# environment, finally whether the directory exists or not
if [ -n "$proto_root" ] ; then
  proto_root=$(realpath "$proto_root") || ( err "PROTO_ROOT/proto_root command line/conf file option shall be an existing empty directory" >&2 && exit 1 )
fi
proot=${c_proto_root:-$proto_root}
[ "$(find "$proot" -maxdepth 1 -type d -empty )" != "$proot" ] && err "PROTO_ROOT/proto_root command line/conf file option shall be an existing empty directory" >&2 && exit 1 || true

# mods: command line may override the value imported from the environment, 
# if the option is missing use the default value 
declare -A mods
for cl_opt in ${!MODS_CONF_OPTS[*]} ; do 
  cf_opt=${MODS_CONF_OPTS[$cl_opt]}
  
  val_cl_opt=${c_mods[$cl_opt]}
  eval "val_cf_opt=$"${cf_opt}

  val_opt=${val_cl_opt:-$val_cf_opt}
  if [ -n "$val_opt" ] ; then 
    val_opt=${val_opt,,} ;
    match_yesno $val_opt || ( err_non_sup $cl_opt >&2 && exit 1 );
  else
    val_opt=${DEF_MODS[$cl_opt]}
  fi

  mods[$cl_opt]=$val_opt 
done

# define working root
wroot=${proot}

inf "Detected environment '$ev'. All options were took from the environment conf files. Command line options override environment options" ;

inf "suite = '$st'"
inf "distro = '$dtr'"
inf "architecture = '$arch'"
inf "install_mirror = '$im'"
inf "locale = '$lcl'"
inf "lang = '$plang'"
inf "langcountry = '$plang_ctry'"
inf "baselang = '$pbaselang'"
inf "timezone = '$tzon'"
inf "packages = '$pkgs'"
inf "hostname = '$hn'"
inf "dhcp = '$dyn'"
inf "address = '$ip'"
inf "network = '$nw'"
inf "netmask = '$msk'"
inf "broadcast = '$bcst'"
inf "gateway = '$gw'"
inf "search = '$srch'"
inf "nameservers = '$dns'"
inf "ntpservers = '$ntp'"
inf "ip6 = '$ip6'"
inf "admin_user = '$admusr'"
inf "admin_full_name = '$admname'"
inf "admin_password = '*****'"
inf "root_password = '******'"
inf "remote_root = '$remroot'"
for cl_opt in ${!MODS_CONF_OPTS[*]} ; do 
  cf_opt=${MODS_CONF_OPTS[$cl_opt]}
  inf "$cf_opt = '"${mods[$cl_opt]}"'"
done
inf "proto_root = '$proot'"
    
# Unbind devices on ERROR
trap _unbind_on_err INT TERM EXIT

step "Bootstrap the system"

# Common packages to include on bootstrapping
#
# apt-utils: APT utility programs such as apt-ftparchive, used to create Package
#   and other index files; apt-sortpkgs, a Package/Source file normalizer; and
#   apt-extracttemplates, used by debconf to prompt for configuration questions
#   before installation.
#
# dialog: Displays several different types of user-friendly dialog boxes from
#   shell scripts. Allows a developer of a script to interact with the user in a
#   much friendlier manner
inc_packages="apt-utils, dialog"

# For lucid suite also include:
#
# libncursesw5 : shared libraries for terminal handling (wide character support)
# This package contains the shared libraries necessary to run programs
# compiled with ncursesw, which includes support for wide characters.
[ $st == "lucid" ] && inc_packages="$inc_packages, libncursesw5"

# On bootstrapping INSTALL_MIRROR, SUITE and COMPONENTS are combined to form
# Debian based entries for apt and/or aptitude package managers. Example, if
# INSTALL_MIRROR is 'http://ftp.debian.org/debian/', the SUITE is 'lenny' and
# COMPONENTS is 'main,contrib' then the resulting Debian /etc/apt/source.list
# entry will result in:
#
# deb http://ftp.debian.org/debian/ lenny main contrib
#
# Common repository sections/components to include on bootstrapping.
components="main"

# For ubuntu distribution also include univese where is loacated the dialog package
[ $dtr == "ubuntu" ] && components="$components,universe"

# debootstrap command does not create locales when install the package locales.
# To fix this, prefix debootstrap invocation with LANG=C and LC_ALL=C variable
# assignments to create C and POSIX locales:
#
#   $ LANG=C LC_ALL=C debootstrap ... (with locales included in package list)
#
# or prefix apt-get install if you are doing the job manually:
#
#   $ LANG=C LC_ALL=C apt-get install locales
inf "Bootstrap a '$dtr' distribution with suite '$st' and architecture '$arch' at '$wroot' directory using mirror '$im'"
sudo mkdir $wroot/boot
LANG=C LC_ALL=C \
  sudo debootstrap --variant="minbase" --include="$inc_packages" --arch="$arch" --components="$components" "$st" "$wroot" "$im"

step "Config locale"

# Create the file with the locale to be generated and with the same format
# encountered in /usr/share/i18n/SUPPORTED. File depends of the distribution.
#
# Compiled  locale files take about 50MB of disk space.  Selected locales at
# ${DISTRO_LOCALE_GEN_PATH[$dtr]} are automatically generated by running the locale-gen program.
# Then package locales is reconfigured.
#
# Once installed, to see which locale the system is actually using:
#
#   $ locale
#
# In the output of the above query, you will see entries for:
#
#   LANG, LC_ALL, LC_CTYPE, LC_NUMERIC, LC_TIME, etc...
#
# Change the locale to be used by the bootstrapped system (or proto) by 
# modifying the file /etc/default/locale. An example content for this file sets 
# system locale to US English with UTF-8 ecoding:
#
#   LANG="en_US.UTF-8"
#
# First reconfigure apt so that it does not install additional packages
LANG=C LC_ALL=C sudo chroot $wroot << EOT
cat > /etc/apt/apt.conf << EOF
APT::Install-Recommends "0" ; APT::Install-Suggests "0" ;
EOF
EOT

# For debian DISTRO install locales
#
# locales: Provides support for localized environments. Installs character and
#   transliteration maps, provides the POSIX locale definition and common
#   scripts for language pack handling.
#
# NOTE: On ubuntu distribution locales is already included in the list.
if [ $dtr == "debian" ] ; then 
bind_dev_pts 
  LANG=C LC_ALL=C sudo chroot $wroot << EOT
export DEBIAN_FRONTEND=noninteractive 
LANG=C LC_ALL=C apt-get --yes --force-yes --no-install-recommends install locales
EOT
unbind_dev_pts 
fi

LANG=C LC_ALL=C sudo chroot $wroot << EOT
cat > ${DISTRO_LOCALE_GEN_PATH[$dtr]} << EOF
$lcl
EOF
locale-gen
dpkg-reconfigure -fnoninteractive -pcritical locales
cat > /etc/default/locale << EOF
LANG="$plang"
EOF
EOT

step "Setup timezone"

chr << EOT
cat > /etc/timezone << EOF
$tzon
EOF
dpkg-reconfigure -fnoninteractive -pcritical tzdata
EOT

step "Download packages"

# Download packages on main and universe (only for ubuntu) first to avoid 
# repeatedly mount and umount devices

# packages to be purged later
purge_pkgs="lsb-release debconf-utils deborphan"

# extra packages whose installation order matters
#
# rsyslog: enhanced multi-threaded syslogd
extra_pkgs="gpgv gnupg localepurge "

# Packages to install in batch
#
# netbase: Provides the necessary infrastructure for basic TCP/IP based
#   networking.
useful_pkgs="netbase sudo openssh-server ngetty resolvconf chkconfig"

# If --dhcp/dhcp command line/conf file option was specified then also include 
# dhcp3-client package on the list 
[ $dyn == "yes" ] && useful_pkgs="dhcp3-client ${useful_pkgs}" || true

# ifupdown: High level tools to configure network interfaces. Provides the tools
#   ifup and ifdown which may be used to configure and deconfigure network
#   interfaces based on interface definitions in /etc/network/interfaces
#
[ $dtr == "debian" ] && useful_pkgs="ifupdown adduser ${useful_pkgs}" || true

# NTP related packages
[ -n $ntp ] && useful_pkgs="ntpdate ${useful_pkgs}" || true
 
apt_get_download $purge_pkgs $extra_pkgs ${EXTRA_PKGS_DISTROS[$dtr]} ${EXTRA_PKGS_SUITES[$st]} $useful_pkgs    

step "Config mirror files"

inf "Append mirrors to '/etc/apt/sources.list.d'"

# All distros; specific distro & all suites; specific distro & suite; user 
cp_mirror_file "$ev"/mirrors.list
cp_mirror_file "$ev"/$dtr/mirrors.list
cp_mirror_file "$ev"/$dtr/$st/mirrors.list
if [ -n "$mf" ]; then
  cp_mirror_file "$mf"
fi

step "Update package list"

# ubuntu-keyring: GnuPG keys of the Ubuntu archive
apt_get_install gpgv gnupg $([ $dtr == "ubuntu" ] && echo "ubuntu-keyring" || true)

# Update package list and download packages first to save resources when 
# mounting and umounting devices
apt_get_update

# Download kernel
apt_get_download ${DISTRO_LNX_IMG_PKG[$dtr, $arch]}

# user packages
apt_get_download $pkgs

step "Prepare /etc/rc.local header"

chr << EOT
cat > /etc/rc.local << EOF
#!/bin/sh

EOF
EOT

step "Install debconf and localepurge"

# Install debconf-utils package for setting seeds
#
# Install localepurge debconf seeds to avoid user interaction on install,
# indicating don't purge the locale related info
#
# For this we need to install localepurge. Automagically remove unnecessary
# locale data. This is just a simple script to recover diskspace wasted for
# unneeded locale files and localized man pages. It will automagically be
# invoked upon completion of any apt installation run.
#
# After installing anything with apt-get install, localepurge will remove all
# translation files and translated man pages in languages you cannot read.
#
# If you want to configure localepurge you need to edit /etc/locale.nopurge
#
# This can save you several megabytes of disk space, depending on the packages
# you have installed.
apt_get_install debconf-utils
chr debconf-set-selections << EOT
localepurge localepurge/remove_no note
localepurge localepurge/verbose boolean false
localepurge localepurge/nopurge multiselect $pbaselang, $plang
localepurge localepurge/dontbothernew boolean false
localepurge localepurge/quickndirtycalc boolean true
localepurge localepurge/mandelete boolean true
localepurge localepurge/showfreedspace  boolean true
localepurge localepurge/none_selected boolean false
EOT
apt_get_install localepurge

step "Install and setup the Linux Kernel"

inf "Config the Linux Kernel at '/etc/kernel-img.conf'"
chr << EOT
cat > /etc/mtab << EOF
EOF
cat > /etc/kernel-img.conf << EOF
do_symlinks = Yes
relative_links = Yes
do_bootloader = No
do_bootfloppy = No
do_initrd = Yes
link_in_boot = No
EOF
EOT

inf "Linux Kernel installation"
# The package 'linux-image-<architecture>' will always depend on the latest
# kernel image available for this architecture on Debian
# 
# The package 'linux-image-server' will always depend on the latest kernel
# image available for Server Equipment on Ubuntu.
#
apt_get_install ${DISTRO_LNX_IMG_PKG[$dtr, $arch]}

# When use linux-image-server the command depmod fails due to the path
# /var/lib/modules/<kernel name for server version>/.. doesn't exists but
# /var/lib/modules/<kernel name for generic version>/.. exists. Seems to be
# that the command 'uname -r' doesn't prints the correct kernel info to
# STDOUT. For now create a symblink.
chr << EOT
[ ! -d /lib/modules/$(uname -r) ] && {
  ln -s /lib/modules/$(kver) /lib/modules/$(uname -r)
} || true
EOT

step "Identify the Linux Standard Base distribution-specific info."

# The lsb-release command is a simple tool to help identify the Linux
# distribution being used and it's compliance with the Linux Standard Base.
#
# While it is intended for use by LSB packages, this command may also
# be useful for programmatically distinguishing between a pure Debian
# installation and derived distributions.
inf "Install 'lsb-release' package to identify de LSB info"
apt_get_install lsb-release
lsb_distro=$(chr lsb_release -is)
lsb_distro=${lsb_distro,}
[ $dtr != "$lsb_distro" ] && ( err "Distribution ID '$dtr' differs from LSB distribution '$lsb_distro'" >&2 && exit 1 ) || true
lsb_suite=$(chr lsb_release -cs)
lsb_suite=${lsb_suite,}
[ $st != "$lsb_suite" ] && ( err "Suite '$st' differs from LSB suite '$lsb_suite'" >&2 && exit 1 ) || true

inf "Identifying the LSB (Linux Standard Base) distribution-specific information"
chr lsb_release -a
apt_get_purge lsb-release

step "Install useful packages"
apt_get_install $useful_pkgs


step "Setup pending actions for first boot"

chr << EOT
cat >> /etc/rc.local << EOF
DEBIAN_FRONTEND=noninteractive dpkg --configure -a 
chkconfig umountnfs.sh off
chkconfig mountnfs-bootclean.sh off
chkconfig mountnfs.sh off
chkconfig console-screen.sh off
chkconfig console-screen.kbd.sh off
chkconfig rc.local off
/usr/sbin/update-bootsystem-insserv
rm /etc/ssh/ssh_host*key*
dpkg-reconfigure -fnoninteractive -pcritical openssh-server
EOF
EOT

step "Prepare first boot execution scripts"
# First boot script can result useful to automate task that runs only the first
# time the system starts. The script calls are placed in /etc/rc.local and once
# executed, a file is placed under /var/lib/blss/ with the same relative name and
# ended in .done.
inf "Prepare firstboot script calls in '/etc/rc.local'"
# All distros; specific distro & all suites; specific distro & suite; user 
cp_firstboot_script "$ev"/firstboot.sh /root/${DEF_EV}/firstboot.sh
cp_firstboot_script "$ev"/$dtr/firstboot.sh /root/${DEF_EV}/$dtr/firstboot.sh
cp_firstboot_script "$ev"/$dtr/$st/firstboot.sh /root/${DEF_EV}/$dtr/$st/firstboot.sh
if [ -n "$fbscript" ]; then
  cp_firstboot_script "$fbscript" /root/${DEF_EV}/user/firstboot.sh
fi

## Enable dash as the default system shell (/bin/sh)  
for pkg in ${EXTRA_PKGS_SUITES[$st]} ; do
  [[ $pkg =~ ^dash$ ]] && {
    step "Use dash as the default system shell"
    chr debconf-set-selections << EOT
# Use dash as the default system shell (/bin/sh)?
dash	dash/sh	boolean	true
EOT
apt_get_install dash
  }
done 

step "Install deborphan"
apt_get_install deborphan

install_user_pkgs

step "Configuring dependency-based boot ordering"

chr debconf-set-selections << EOT
insserv	insserv/enable	boolean	true
EOT
for pkg in ${EXTRA_PKGS_SUITES[$st]} ; do
  [[ $pkg =~ ^insserv$ ]] && {
    apt_get_install insserv
  }
done

step "Import various debconf seeds files"
if [ -d "$ev"/.seeds ] && [ -r "$ev"/.seeds ]; then
  find "$ev"/.seeds -type f -name \*.seeds -exec cat {} \; | chr debconf-set-selections
  find "$ev"/.seeds -type f -name \*.seeds -ls
fi

inf "Purge 'debconf-utils' package"
apt_get_purge debconf-utils

step "Upgrade"

# dist-upgrade in addition to performing the function of upgrade,
# also intelligently handles changing dependencies with new versions
# of packages; apt-get has a "smart" conflict resolution system, and
# it will attempt to upgrade the most important packages at the
# expense of less important ones if necessary. So, dist-upgrade
# command may remove some packages.
inf "Distribution upgrade"
apt_get_dist_upgrade

if [ $ip6 == "no" ]; then
  step "Disable IPv6"

  inf "Disabling IPv6"
  chr << EOT
cat >> /etc/modprobe.d/aliases << EOF
alias net-pf-10 off # Disable ipv6
alias ipv6 off # Disable ipv6
EOF
EOT

  # Delete IPv6 related files
  chr << EOT
rm -rf /lib/modules/$(kver)/kernel/net/ipv6
rm -f /lib/xtables/libip6t_HL.so
rm -f /lib/xtables/libip6t_ah.so
rm -f /lib/xtables/libip6t_ipv6header.so
rm -f /lib/xtables/libip6t_hl.so
rm -f /lib/xtables/libip6t_mh.so
rm -f /lib/xtables/libip6t_rt.so
rm -f /lib/xtables/libip6t_LOG.so
rm -f /lib/xtables/libip6t_REJECT.so
rm -f /lib/xtables/libip6t_frag.so
rm -f /lib/xtables/libip6t_icmp6.so
rm -f /lib/xtables/libip6t_dst.so
rm -f /lib/xtables/libip6t_hbh.so
rm -f /lib/xtables/libip6t_eui64.so
EOT

fi

# Modules
purge_mods
cleanup_mod_dirs
reg_modules_dep

step "Replace getty with ngetty"

apt_get_install ngetty
case "$dtr" in
  debian)
    chr << EOT
sed -ie 's/1:2345:respawn:\/sbin\/getty 38400 tty1/# &/' /etc/inittab
sed -ie 's/2:23:respawn:\/sbin\/getty 38400 tty2/# &/' /etc/inittab
sed -ie 's/3:23:respawn:\/sbin\/getty 38400 tty3/# &/' /etc/inittab
sed -ie 's/4:23:respawn:\/sbin\/getty 38400 tty4/# &/' /etc/inittab
sed -ie 's/5:23:respawn:\/sbin\/getty 38400 tty5/# &/' /etc/inittab
sed -ie 's/6:23:respawn:\/sbin\/getty 38400 tty6/# &\n\n# Run ngetty in standard run-levels\nng:2345:respawn:\/sbin\/ngetty 1 2 3 4 5 6/' /etc/inittab
EOT
   ;;
  ubuntu)
    chr << EOT
sed -ie 's/exec \/sbin\/getty -8 38400 tty1/# &\n\n# Run ngetty in standard run-levels\nexec \/sbin\/ngetty 1 2 3 4 5 6/' /etc/init/tty1.conf
sed -ie 's/start on runlevel \[23\]/# &/' /etc/init/tty2.conf
sed -ie 's/stop on runlevel \[!23\]/# &/' /etc/init/tty2.conf
sed -ie 's/respawn/# &/' /etc/init/tty2.conf
sed -ie 's/exec \/sbin\/getty -8 38400 tty2/# &/' /etc/init/tty2.conf
sed -ie 's/start on runlevel \[23\]/# &/' /etc/init/tty3.conf
sed -ie 's/stop on runlevel \[!23\]/# &/' /etc/init/tty3.conf
sed -ie 's/respawn/# &/' /etc/init/tty3.conf
sed -ie 's/exec \/sbin\/getty -8 38400 tty3/# &/' /etc/init/tty3.conf
sed -ie 's/start on runlevel \[23\]/# &/' /etc/init/tty4.conf
sed -ie 's/stop on runlevel \[!23\]/# &/' /etc/init/tty4.conf
sed -ie 's/respawn/# &/' /etc/init/tty4.conf
sed -ie 's/exec \/sbin\/getty -8 38400 tty4/# &/' /etc/init/tty4.conf
sed -ie 's/start on runlevel \[23\]/# &/' /etc/init/tty5.conf
sed -ie 's/stop on runlevel \[!23\]/# &/' /etc/init/tty5.conf
sed -ie 's/respawn/# &/' /etc/init/tty5.conf
sed -ie 's/exec \/sbin\/getty -8 38400 tty5/# &/' /etc/init/tty5.conf
sed -ie 's/start on runlevel \[23\]/# &/' /etc/init/tty6.conf
sed -ie 's/stop on runlevel \[!23\]/# &/' /etc/init/tty6.conf
sed -ie 's/respawn/# &/' /etc/init/tty6.conf
sed -ie 's/exec \/sbin\/getty -8 38400 tty6/# &/' /etc/init/tty6.conf
EOT
   ;;
esac

step "Hostname and network configuration"

set_hostname
set_networking

# NTP servers configuration
if [ -n "$ntp" ] ; then 
  chr sed -ie "s/^NTPSERVERS=.*/NTPSERVERS=\"${ntp}\"/" /etc/default/ntpdate
fi

step "Remove unnecessary packages and cleanup cache"

# Purge unnecessary packages in a server environment
inf "Purge unnecessary packages"
apt_get_purge man-db

# Remove “orphaned” packages
inf "Remove “orphaned” packages and 'deborphan'"
apt_get_purge $(chr deborphan) deborphan

step "Let the ${ACPI_PER_DISTRO[$dtr]}, rsyslog and ${READAHEAD_PER_SUITE[$st]} packages pending to configure on first boot"

# Autoremove packages and clean /var/cache/apt/archives first
apt_get_autoremove
apt_get_clean

# Download packages and dependencies
config_on_first_boot="rsyslog acpid ${ACPI_PER_DISTRO[$dtr]}"
config_on_first_boot="${config_on_first_boot} ${READAHEAD_PER_SUITE[$st]}"

# Download all the packages to /var/cache/apt/archives
apt_get_download $config_on_first_boot

# Move the packages to the pending location
chr << EOT
mkdir -p /var/lib/blss/var/cache/apt/archives
mv /var/cache/apt/archives/*.deb /var/lib/blss/var/cache/apt/archives/
EOT

# Activate profiling on the second boot 
if [ ${READAHEAD_PER_SUITE[$st]} = "readahead" ] ; then
  chr << EOT
cat >> /etc/rc.local << EOF
touch /etc/readahead/profile-once
EOF
EOT
fi

# Clears out the local repository of retrieved package files
inf "Clears out the local repository of retrieved package files at '/var/cache/apt/archives/' and '/var/cache/apt/archives/partial/'"
apt_get_clean
apt_get_autoclean

# No longer need to unbind on error
trap - INT TERM EXIT

# Delete Apt's memory mapped package cache files
inf "Delete Apt's memory mapped package cache files"
chr << EOT
rm /var/cache/apt/pkgcache.bin
rm /var/cache/apt/srcpkgcache.bin
EOT

step "Config admin acount"

# Setting admin (wheel for other flavors) group
inf "Setting 'admin' group"
chr addgroup --system admin

# Append 'admin' group to sudoers at '/etc/sudoers'
chr << EOT
cat >> /etc/sudoers << EOF
%admin ALL=(ALL) ALL
EOF
EOT

# Setting up user, adding her/him to admin group and setting the password
#
# The command 'chpasswd' can change many account passwords in one hit, it
# performs update in batch mode
#
# --disabled-password : Like --disabled-login, but logins are still possible (for
# example using SSH RSA keys) but not using password authentication
# --gecos : Set the gecos field for the new entry generated. adduser  will not ask
# for finger information if this option is given
# Also fix permissions on user home folder
inf "Creating the user, adding it to admin group and setting the password"
chr << EOT
adduser --disabled-password --ingroup admin --gecos $admname $admusr
chown $admusr:admin /home/$admusr
EOT
chr su -c chpasswd << EOT
$admusr:$admpwd
EOT

# Setup permissions and group so only members of admin group (wheel for others)
# can run 'su'.
chr << EOT
chgrp admin \$(which su)
chmod 4111 \$(which su)
chgrp admin \$(which sudo)
chmod 4111 \$(which sudo)
EOT

step "Config root account"

# Remote root login gets enabled once openssh-server is installed. Direct login 
# is also enabled, and root password is empty at this point.
if (( root_defaults_flag == 1 )) ; then
  # Defaults to no remote login and no direct login
  disable_root_remote
  disable_root_direct
else
  # No defaults
  if [ $remroot == "yes" ] ; then
    # Remote login implies password prompt
    enable_root_passwd
  else
    # direct login disables remote login a check for password prompt
    disable_root_remote
    if [ "$rootpwd" == "-" ]; then
      warn "Root password is missing, leaves root without password"
    else
      enable_root_passwd
    fi
  fi
fi

step "Final cleanup"

# Clean remaining locale and timezone data files and directories
chr << EOT
find /usr/share/locale/ -type d -empty -delete
find /usr/share/zoneinfo/ -type f \! -path "/usr/share/zoneinfo*$tzon" -delete
find /usr/share/zoneinfo/ -type d -empty -delete 
EOT

# Remove unneccesary documentation and man files at /usr/share/doc
inf "Removing docs and mans"
chr << EOT
rm -rf /usr/share/doc/*
rm -rf /usr/share/man/*
EOT

# Remove /boot/initrd.img-<kernel-release>.bak
chr << EOT
rm -f /boot/initrd.img-$(kver).bak
EOT

# Cleanup /tmp and /var/tmp
inf "Cleanup '/tmp' and '/var/tmp' directories"
chr << EOT
rm -rf /tmp/*
rm -rf /var/tmp/*
EOT

# Cleanup all log files but '/var/log/dmesg', then clear the ring buffer content to
# start a fresh one
inf "Cleanup all log files but '/var/log/dmesg', then clear the ring buffer content to start a fresh one"
chr << EOT
find /var/log -type f \! -path /var/log/dmesg -delete
dmesg -c > /dev/null
EOT
inf "Proto completed successfully" && exit 0
