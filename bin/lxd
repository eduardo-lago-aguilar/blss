#!/bin/bash -e

# === WELCOME ===
# 
# BLSS stands for Bootstrapped Linux Server Systems, it is set of tools to quickly 
# assemble multiple small & optimized Linux-based virtual appliances with the 
# purpose of an easy deployment of package-based distributed systems, like Apache 
# Hadoop Cloudera Distribution, where every server have a different role in a 
# computational cluster or grid. 
# 
# The delivered virtual appliances fit better for servicing purpose, they are 
# reduced in size and have a small memory footprint. The lifecycle of such systems 
# is composed of three phases: prototyping, where shared packages & configuration 
# is settled; cloning, where different server roles are defined; and finally 
# deployment where unique appliances are produced.
# 
# The project is hosted at https://bitbucket.org/eduardo_lago_aguilar/blss
# 
# === AUTHOR ===
#   Written by Eduardo Lago Aguilar, eduardo.lago.aguilar@gmail.com, 
#   http://eduardo-lago.blogspot.com

# lxd:
#
#   Virtual appliance creation. Run this script with --help for details.

# Resolve script location, $0 may be a link
script="$0"
# Need this for relative symlinks
while [ -h "$script" ] ; do
  lst=$(ls -ld "$script")
  lnk=$(expr "$lst" : '.*-> \(.*\)$')
  if expr "$lnk" : '/.*' > /dev/null; then
    script="$lnk"
  else
    script=$(dirname "$script")/"$lnk"
  fi
done
BLSS_HOME=$(dirname "$script")/..
BIN="$BLSS_HOME"/bin
ENV="$BLSS_HOME"/env
EXT="$BLSS_HOME"/ext
TST="$BLSS_HOME"/tst

. "$BIN"/blss-commons

usage() {
  local IFS=","
  cat << EOF
NAME
  lxd - Deploys a Linux-Server System clone  by creating a virtual disk and a libvirt XML config file.

SYNOPSIS
  lxd [GENERAL OPTIONS...] [HYPERVISOR OPTIONS...] [DISK OPTIONS...] DEPLOYMENT_ROOT

DESCRIPTION

  lxd creates a virtual disk in qcow2 format and a libvirt config file from a clone root directory (/) located at CLONE_ROOT. The resulting .qcow2 and .xml files can be used with virsh to define a virtual machine.  

GENERAL OPTIONS
  --help
    Show this help

  --clone-root CLONE_ROOT
    The root directory of the specific clone to be loaded into the virtual disk. This parameter is mandatory.

HYPERVISOR OPTIONS

  --hypervisor HYPERVISOR
    The hypervisor type. Supported values are: ${SUPPORTED_HYPERVISORS[*]}. The complete list of hypervisor drivers can be found at 'http://libvirt.org/drivers.html'. Defaults to ${DEF_HYPERVISOR}.

  --cpu CPU
    The number of CPU to assign. Defaults to ${DEF_CPU}.

  --memory MEMORY
    The RAM memory to assign in megabytes. Defaults to ${DEF_MEMORY}. 

DISK OPTIONS

  --size SIZE
    Hard disk size in megabytes. Defaults to ${DEF_SIZE}.    

  --root-filesystem ROOT_FILESYSTEM
    The root (/) partition filesystem format. Supported file systems are: ${SUPPORTED_FILESYSTEMS[*]}.

  --formats FORMATS
    A space separated list of the different formats for the disk. The first format in list is include as <disk /> element in the generated libvirt.xml file. Supported formats are: ${SUPPORTED_FORMATS[*]}. Defaults to ${DEF_FORMATS}
.
EXAMPLES

  TODO: ...


AUTHOR
  Written by Eduardo Lago Aguilar, eduardo.lago.aguilar@gmail.com

EOF
}

# parse command line options
#
# NOTE:
#   - c_ prefix indicates a command line option
#   - without c_ prefix indicates a conf file option
#   - short name indicates the effective option

# Quotes around `"$@"' let each cmd-line parameter expand to a separate word. 
# TEMP variable is necessary, as the `eval set --' would nuke the return value 
# of getopt.
set +e
TEMP=$(getopt -n 'lxc' -o '' --longoptions \
help,\
clone-root:,\
hypervisor:,\
cpu:,\
memory:,\
size:,\
root-filesystem:,\
formats: \
-- "$@")
if [ $? != 0 ] ; then 
  usage >&2 ; 
  exit 1 ; 
fi
set -e

# quotes around `$TEMP' are essential
eval set -- "$TEMP"

# unset c_* options
unset \
  c_clone_root \
  c_hypervisor \
  c_cpu \
  c_memory \
  c_size \
  c_root_filesystem \
  c_formats

declare -A c_os 
while true; do
  # flags an option if appears in the command line, options can be specified 
  # only once
  (( c_os[$1] == 1 )) && err "$1 command line option was already specified" && usage >&2 && exit 1 ; 
  c_os[$1]=1 ;
  case $1 in
    --help)
      usage && shift && exit 0 ;;
    --clone-root)
      c_clone_root=${2:?$(err_non_empty $1)} ; 
      shift 2 ;;
    --hypervisor)
      c_hypervisor=${2:?$(err_non_empty $1)} ; 
      shift 2 ;;
    --cpu)
      c_cpu=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
    --memory)
      c_memory=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
    --size)
      c_size=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
    --root-filesystem)
      c_root_filesystem=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
    --formats)
      c_formats=${2:?$(err_non_empty $1)} ;
      shift 2 ;;
    --) 
      shift ; 
      break ;;
    *) 
      err "Error parsing arguments" && usage >&2 && exit 1 ;;
  esac
done

# deployment root is the remaining
c_deployment_root=$(trim_spcs "$@")
droot=${c_deployment_root:?$(err_non_empty DEPLOYMENT_ROOT)}
if [ -e "$droot" ] ; then
  [ "$(find "$droot" -maxdepth 1 -type d -empty )" != "$droot" ] && err "DEPLOYMENT_ROOT command line option shall be an existing empty directory or a non-existing directory" >&2 && exit 1 || true
fi


unset c_os

proc_ev

# unset conf file options before start importing from environment
unset \
  clone_root \
  hypervisor \
  cpu \
  memory \
  size \
  root_filesystem \
  formats

# import general env opts
imp_conf "$ev"/lxd.conf

# clone root
croot=${c_clone_root:-$clone_root}
croot=${croot:?$(err_non_empty --clone-root)}
croot=$(realpath "$croot") || ( err "--clone-root/clone_root command line/conf file option shall be an existing non-empty directory containing a clone system" >&2 && exit 1 ) ;
empty=$(find "$croot" -maxdepth 0 -type d -empty)
if [ "$empty" != "" ] ; then
  err "--clone-root/clone_root command line/conf file option shall be an existing non-empty directory containing a clone system" >&2 && exit 1
fi

# hypervisor: command line may override the value imported from the 
# environment, if the option is missing use the default value, finally verify if 
# the value is supported.    
hyv=${c_hypervisor:-$hypervisor} 
if [ -n "$hyv" ] ; then
  hyv=${SUPPORTED_HYPERVISORS[$hyv]} ;
  hyv=${hyv:?$(err_non_sup --hypervisor)} ;
else
  hyv=$DEF_HYPERVISOR ;
fi

# cpu: command line may override the value imported from the 
# environment, if the option is missing use the default value, finally verify if 
# the value is supported.    
vcpu=${c_cpu:-$cpu} 
if [ -n "$vcpu" ] ; then
  match_positive_num $vcpu || ( err_non_sup --cpu >&2 && exit 1 ) ;
else
  vcpu=$DEF_CPU ;
fi

# memory: command line may override the value imported from the 
# environment, if the option is missing use the default value, finally verify if 
# the value is supported.    
mem=${c_memory:-$mem} 
if [ -n "$mem" ] ; then
  match_positive_num $mem || ( err_non_sup --memory >&2 && exit 1 ) ;
else
  mem=$DEF_MEMORY ;
fi

# size: command line may override the value imported from the 
# environment, if the option is missing use the default value, finally verify if 
# the value is supported.    
sz=${c_size:-$size} 
if [ -n "$sz" ] ; then
  match_positive_num $sz || ( err_non_sup --size >&2 && exit 1 ) ;
else
  sz=$DEF_SIZE ;
fi

# root-filesystem: command line may override the value imported from the 
# environment, if the option is missing use the default value, finally verify if 
# the value is supported.    
rootfs=${c_root_filesystem:-$root_filesystem} 
if [ -n "$rootfs" ] ; then
  rootfs=${SUPPORTED_FILESYSTEMS[$rootfs]} ;
  rootfs=${rootfs:?$(err_non_sup --root-filesystem)} ;
else
  rootfs=$DEF_ROOT_FILESYSTEM ;
fi

# formats: command line may override the value imported from the 
# environment, if the option is missing use the default value, finally verify if 
# the value is supported.    
fmts=${c_formats:-$formats} 
if [ -n "$fmts" ] ; then
  declare -A fmt_incl
  for fmt in $fmts ; do
    f=${SUPPORTED_FORMATS[$fmt]} ;
    f=${f:?$(err_non_sup --formats)} ;
    (( fmt_incl[$f] == 1 )) && err_rep_value --formats && usage >&2 && exit 1 || true ; 
    fmt_incl[$f]=1 ;  
  done
  unset fmt_incl
else
  fmts=$DEF_FORMATS ;
fi

mkdir -p "$droot"

inf "Detected environment '$ev'. All options were took from the environment conf files. Command line options override environment options" ;

inf "clone_root = '$croot'"
inf "hypervisor = '$hyv'"
inf "cpu = '$vcpu'"
inf "memory = '$mem'"
inf "size = '$sz'"
inf "root_filesystem = '$rootfs'"
inf "formats = '$fmts'"
inf "deployment_root = '$droot'"

# define working root on random temporal directory
wroot=$(mktemp -d)

step "Create a raw disk image"
# TODO: Add support for file system types other than ext3

# Create the new disk image of given size and raw format. 
# The raw disk image format (default), has the advantage
# of being simple and easily exportable to all other emulators. If
# your file system supports holes (for example in ext2 or ext3 on
# Linux or NTFS on Windows), then only the written sectors will
# reserve space. Use "qemu-img info" to know the real size used by
# the image or "ls -ls" on Unix/Linux
sudo qemu-img create -f raw "$droot"/disk.img ${sz}M

step "Create a new disklabel"
# Create  a  new  disklabel  (partition table) of label-type.  
# label-type  should  be  one  of  "bsd",  "dvh", "gpt", "loop", 
# "mac", "msdos", "pc98", or "sun".
sudo parted --script "$droot"/disk.img mklabel msdos

step "Make partitions on disk"
sudo parted --script -- "$droot"/disk.img mkpart primary 1049kB 64MB
sudo parted --script "$droot"/disk.img set 1 boot on
sudo parted --script -- "$droot"/disk.img mkpart primary 64MB 100%

_release_devs(){
  # Detach the file or device associated with the specified loop device. 
  # See the above explantaion of loop devices
  sudo umount "$wroot"/boot && inf "Unmounted $wroot"/boot
  sudo umount "$wroot" && inf "Unmounted $wroot"

  sudo rm /dev/mvda && inf "Block device removed"
  sudo rm /dev/mvda1 && inf "Block device removed"
  sudo rm /dev/mvda2 && inf "Block device removed"

  sudo kpartx -v -d /dev/mapper/vda && inf "Mapper detached"
  sudo dmsetup remove vda && inf "Mapper detached"
  sudo kpartx -d $ld  && inf "Mapper detached"
  sudo losetup -d $ld && inf "Loop device detached" 
}

# trap cmd to unbind mounted devices on error
_release_devs_on_err(){
	local rc=${1:-''}
	if [[ -z "$rc" ]] ; then
		rc=$?
	fi
  _release_devs
	local alt_rc=$?
	(( alt_rc != 0 )) && rc=$alt_rc
	trap - INT TERM EXIT
	exit $rc
}

# Unbind devices on ERROR
trap _release_devs_on_err INT TERM EXIT

step "Create a loop device and device mappers for the disk"

# create loop device for disk image
ld=$(sudo losetup -f --show "$droot"/disk.img)

# creates a device mapper /dev/mapper/vda for the whole disk
sudo dmsetup create vda << EOT
0 $(( ${sz} * 2048 )) linear ${ld} 0
EOT

# Creates device mappers /dev/mapper/vda{1,2} for the {first,second} partition
# Create device maps from partition tables.
#  -a     Add partition mappings
#  -v     Operate verbosely
sudo kpartx -v -a /dev/mapper/vda

step "Create a block devices directly under /dev"

eval $(stat -c 'major=%t ; minor=%T' $(realpath /dev/mapper/vda))
sudo mknod /dev/mvda b $(hx2dc $major) $(hx2dc $minor)

eval $(stat -c 'major=%t ; minor=%T' $(realpath /dev/mapper/vda1))
sudo mknod /dev/mvda1 b $(hx2dc $major) $(hx2dc $minor) 

eval $(stat -c 'major=%t ; minor=%T' $(realpath /dev/mapper/vda2))
sudo mknod /dev/mvda2 b $(hx2dc $major) $(hx2dc $minor) 

step "Create filesystems and grab UUIDs"

# mke2fs : Create an ext2/ext3/ext4 filesystem. If called as mkfs.ext3 a journal
# is created as if the -j option was specified.
sudo mkfs -t ext3 /dev/mvda1
yes | sudo mkfs -t $rootfs /dev/mvda2

step "Mount and populate the virtual disk with the system"

if [ $(lsb_release -is) = "Debian" ] && [ $rootfs = "ext4" ] ; then
  sudo tune2fs -E test_fs /dev/mvda2 ;
  sudo mount -t ext4dev /dev/mvda2 "$wroot" ;
else
  sudo mount /dev/mvda2 "$wroot" ;
fi

# Grab UUIDs
eval $(sudo blkid -o udev /dev/mvda1)
VDA1_ID_FS_UUID=${ID_FS_UUID}

# NOTE: blikd shall be executed after tune2fs becaused the UUID is changed! 
eval $(sudo blkid -o udev /dev/mvda2)
VDA2_ID_FS_UUID=${ID_FS_UUID}

inf "Copying archives..."
sudo find "$croot" -mindepth 1 -maxdepth 1 \! -path "$croot"/boot -exec cp -a {} "$wroot" \;

sudo mkdir -p "$wroot"/boot
sudo mount /dev/mvda1 "$wroot"/boot
sudo cp -a "$croot"/boot "$wroot"/

# grab locale
lcl=$(sudo cat "$wroot"/etc/default/locale)
lcl=${lcl#LANG=\"}
lcl=${lcl%\"};
proc_lcl

# grab timezone
tzon=$(sudo cat "$wroot"/etc/timezone)
proc_tzon

# grab hostname
c_hn=$(chr cat /etc/hostname)

step "Setup grub device mapping, load.cfg and grub.cfg. Install GRUB2"

chr << EOT
mkdir -p /boot/grub
cat > /boot/grub/device.map << EOF
(hd0) /dev/mvda
EOF
cat > /boot/grub/load.cfg << EOF
search.fs_uuid ${VDA1_ID_FS_UUID} root 
set prefix=(\$root)/grub
EOF
cat > /boot/grub/grub.cfg << EOF
insmod part_msdos
insmod ext2
EOF
EOT
if [ -n "${GRUB_MODS_PER_FILESYSTEM[$rootfs]}" ] ; then
  chr << EOT
cat >> /boot/grub/grub.cfg << EOF
insmod ${GRUB_MODS_PER_FILESYSTEM[$rootfs]}
EOF
EOT
fi 
chr << EOT
cat >> /boot/grub/grub.cfg << EOF
set root='(hd0,msdos1)'
search --no-floppy --fs-uuid --set=root ${VDA1_ID_FS_UUID}
linux /vmlinuz-$(kver) root=UUID=${VDA2_ID_FS_UUID} ro quiet
initrd /initrd.img-$(kver)
boot
EOF
EOT

sudo grub-install --no-floppy --modules="part_msdos ext2 ${GRUB_MODS_PER_FILESYSTEM[$rootfs]}" --root-directory="$wroot" /dev/mvda

step "Generate fstab"

chr << EOT
cat > /etc/fstab << EOF
# /etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
proc            /proc           proc    defaults        0       0
# / was on /dev/vda1 during installation
UUID=${VDA1_ID_FS_UUID} /boot           ext3    noatime,nodev 0       1
# /boot was on /dev/vda2 during installation
UUID=${VDA2_ID_FS_UUID} /           ${rootfs}    defaults 0       2
EOF
EOT

step "Unpack pending packages"

# Autoremove packages and clean /var/cache/apt/archives first
apt_get_autoremove
apt_get_clean

# Move the packages from the pending location to apt cache
chr << EOT
mv /var/lib/blss/var/cache/apt/archives/*.deb /var/cache/apt/archives/ 
EOT

# Filesystems requiere extra packages for self cheking and maintenance
if [ -n "${EXTRA_PACKAGES_PER_FILESYSTEM[$rootfs]}" ] ; then 
  apt_get_download ${EXTRA_PACKAGES_PER_FILESYSTEM[$rootfs]}
fi

# Unpack all the packages and postpone the configuration phase until first boot
apt_get_unpack_all

# Clears out the local repository of retrieved package files
inf "Clears out the local repository of retrieved package files at '/var/cache/apt/archives/' and '/var/cache/apt/archives/partial/'"
apt_get_clean
apt_get_autoclean

step "Unmount chroot and detach the loop device"
_release_devs

# No longer need to release devices on error
trap - INT TERM EXIT

step "Processing disk formats"

# QCOW2
if [[ $fmts =~ (\ |^)qcow2(\ |$) ]] ; then
  sudo qemu-img convert -f raw -O qcow2 "$droot"/disk.img "$droot"/disk.${EXTS_PER_FORMAT["qcow2"]} && inf "Created QCOW2 disk image: '$droot/disk.${EXTS_PER_FORMAT["qcow2"]}'"
fi

# VDI
if [[ $fmts =~ (\ |^)vdi(\ |$) ]] ; then
  sudo qemu-img convert -f raw -O vdi "$droot"/disk.img "$droot"/disk.${EXTS_PER_FORMAT["vdi"]} && inf "Created VDI disk image: '$droot/disk.${EXTS_PER_FORMAT["vdi"]}'"
fi

# VMDK 3 and 4
if [[ $fmts =~ (\ |^)vmdk4(\ |$) ]] ; then
  sudo qemu-img convert -f raw -O vmdk "$droot"/disk.img "$droot"/disk.${EXTS_PER_FORMAT["vmdk4"]} && inf "Created VMDK 3 & 4 disk image: '$droot/disk.${EXTS_PER_FORMAT["vmdk4"]}'"
fi

# VMDK 6
if [[ $fmts =~ (\ |^)vmdk6(\ |$) ]] ; then
  sudo qemu-img convert -f raw -O vmdk -o compat6 "$droot"/disk.img "$droot"/disk.${EXTS_PER_FORMAT["vmdk6"]} && inf "Created VMDK 6 disk image: '$droot/disk.${EXTS_PER_FORMAT["vmdk6"]}'"
fi

# VPC
if [[ $fmts =~ (\ |^)vpc(\ |$) ]] ; then
  sudo qemu-img convert -f raw -O vpc "$droot"/disk.img "$droot"/disk.${EXTS_PER_FORMAT["vpc"]} && inf "Created VirtualPC compatible disk image: '$droot/disk.${EXTS_PER_FORMAT["vpc"]}'"
fi

# RAW
if [[ ! $fmts =~ (\ |^)raw(\ |$) ]] ; then
  sudo rm "$droot"/disk.img
fi

step "Generates libvirt domain XML defininion file"
libvirt() {
  # take the first format from the --format/format command line/conf file option   
  lb_disk_fmt=$(printf $fmts)  
  lb_disk_ext=${EXTS_PER_FORMAT[$lb_disk_fmt]}
  lb_disk_drv=${DISKDRIVER_PER_FORMAT[${lb_disk_fmt}]}
  mem_kb=$(( $mem * 1024))
  cat > "$droot"/libvirt.xml << EOT
<domain type='${hyv}'>
  <name>${c_hn}</name>
  <memory>$mem_kb</memory>
  <vcpu>${vcpu}</vcpu>
  <os>
    <type>hvm</type>
    <boot dev='hd' />
  </os>
  <features>
    <acpi />
  </features>
  <clock offset='utc' />
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
  <devices>
    <emulator>$(which $hyv)</emulator>
    <interface type='bridge'>
      <source bridge='br0' />
    </interface>
    <input type='mouse' bus='ps2' />
    <graphics type='vnc' port='-1' listen='127.0.0.1' />
    <disk type='file' device='disk'>
      <driver name='qemu' type='${lb_disk_drv}' />
      <source file='$(realpath "$droot"/disk.${lb_disk_ext})' />
      <target dev='hda' />
    </disk>
  </devices>
</domain>
EOT
  inf "Generated libvirt domain XML defininion file"
}

libvirt

inf "Deployment completed successfully" && exit 0
