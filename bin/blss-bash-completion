#!/bin/bash

# === WELCOME ===
# 
# BLSS stands for Bootstrapped Linux Server Systems, it is set of tools to quickly 
# assemble multiple small & optimized Linux-based virtual appliances with the 
# purpose of an easy deployment of package-based distributed systems, like Apache 
# Hadoop Cloudera Distribution, where every server have a different role in a 
# computational cluster or grid. 
# 
# The delivered virtual appliances fit better for servicing purpose, they are 
# reduced in size and have a small memory footprint. The lifecycle of such systems 
# is composed of three phases: prototyping, where shared packages & configuration 
# is settled; cloning, where different server roles are defined; and finally 
# deployment where unique appliances are produced.
# 
# The project is hosted at https://bitbucket.org/eduardo_lago_aguilar/blss
# 
# === AUTHOR ===
#   Written by Eduardo Lago Aguilar, eduardo.lago.aguilar@gmail.com, 
#   http://eduardo-lago.blogspot.com

# blss-bash-completion:
#
#   Bash completion for all scripts. 
#
#   Locate this script under /etc/bash_completion.d/ directory to enable bash 
#   completion of script command line options.

# Suppported 
declare -A SUPPORTED_SUITES=(["squeeze"]="squeeze" ["lenny"]="lenny" ["natty"]="natty" ["maverick"]="maverick" ["lucid"]="lucid")
declare -A DISTRO_PER_SUITE=(["lenny"]="debian" ["squeeze"]="debian" ["lucid"]="ubuntu" ["maverick"]="ubuntu"  ["natty"]="ubuntu")
declare -A SUPPORTED_ARCHS=(["amd64"]="amd64" ["i386"]="i386")
declare -A SUPPORTED_FILESYSTEMS=(["ext3"]="ext3" ["ext4"]="ext4" ["btrfs"]="btrfs" ["jfs"]="jfs" ["xfs"]="xfs" ["reiserfs"]="reiserfs")
declare -A SUPPORTED_HYPERVISORS=(["esxi"]="esxi" ["kvm"]="kvm" ["qemu"]="qemu" ["vbox"]="vbox" ["vmserver"]="vmserver" ["vmw6"]="vmw6" ["xen"]="xen")
SUPPORTED_CPU=$(echo {1..32})

# Defaults
declare -A DEF_INSTALL_MIRROR=(["debian"]="http://ftp.debian.org/debian" ["ubuntu"]="http://archive.ubuntu.com/ubuntu")

_find_supported_locales()
{
  search=$(eval echo "$cur" 2>/dev/null || eval echo "$cur'" 2>/dev/null || eval echo "$cur\"" 2>/dev/null || "")
  grep -v '^#.*' /usr/share/i18n/SUPPORTED | grep -- "^$search" | sed -e "{" -e 's#\\#\\\\#g' -e "s#'#\\\'#g" -e 's#"#\\\"#g' -e "}"
}
_find_supported_timezones()
{
  find /usr/share/zoneinfo/ -type f -print | sed -e 's/\/usr\/share\/zoneinfo\///' -e 's/posix\///' -e 's/right\///' | sort
}

_find_pkgs() {
  apt-cache --no-generate pkgnames "$cur" 2> /dev/null
}

_lxp() {
  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  opts="--help --suite --architecture --install-mirror --mirror-file --locale --timezone --first-boot-script --packages --hostname --dhcp --address --network --netmask --broadcast --gateway --search --nameservers --ntpservers --ip6 --admin-user --admin-full-name --admin-password --remote-root --root-password"

  # Complete the arguments of long/short options
  case "${prev}" in
    --suite)
        COMPREPLY=( $(compgen -W "${SUPPORTED_SUITES[*]}" -- ${cur}) ) ;
        return 0 ;;
    --architecture)
        COMPREPLY=( $(compgen -W "${SUPPORTED_ARCHS[*]}" -- ${cur}) ) ;
        return 0 ;;
    --mirror-file)
        _filedir ;
        return 0 ;;
    --first-boot-script)
        _filedir ;
        return 0 ;;
    --locale)
        local IFS=$'\n' ;
        COMPREPLY=( $( compgen -W "$(_find_supported_locales)" -- "$cur" ) ) ;

        local escaped_single_qoute="'\''" ;
        local i=0 ;
        for entry in ${COMPREPLY[*]} ; do
          if [[ "${cur:0:1}" == "'" ]] 
          then
            # started with single quote, escaping only other single quotes
            # [']bla'bla"bla\bla bla --> [']bla'\''bla"bla\bla bla
            COMPREPLY[$i]="${entry//\'/${escaped_single_qoute}}" 
          elif [[ "${cur:0:1}" == "\"" ]] 
          then
            # started with double quote, escaping all double quotes and all backslashes
            # ["]bla'bla"bla\bla bla --> ["]bla'bla\"bla\\bla bla
            entry="${entry//\\/\\\\}" 
            COMPREPLY[$i]="${entry//\"/\\\"}" 
          else 
            # no quotes in front, escaping _everything_
            # [ ]bla'bla"bla\bla bla --> [ ]bla\'bla\"bla\\bla\ bla
            entry="${entry//\\/\\\\}" 
            entry="${entry//\'/\'}" 
            entry="${entry//\"/\\\"}" 
            COMPREPLY[$i]="${entry// /\\ }"
          fi
          (( i++ ))
        done
        return 0 ;;
    --timezone)
        COMPREPLY=( $(compgen -W "$(_find_supported_timezones)" -- ${cur}) ) ;
        return 0 ;;
    --packages)
        # TODO: generate a list instead of a single package
        COMPREPLY=( $(compgen -W "$(_find_pkgs)" -- ${cur}) ) ;
        return 0 ;;
    --dhcp|--remote-root|--ip6)
        COMPREPLY=( $(compgen -W "yes no" -- ${cur}) ) ;
        return 0 ;;
--install-mirror|--hostname|--address|--network|--netmask|--broadcast|--gateway|--search|--nameservers|--ntpservers|--admin-user|--admin-full-name|--admin-password|--root-password)
        COMPREPLY=( $(compgen -W "" -- ${cur}) ) ;
        return 0 ;;
     *)
    ;;
  esac

  # Complete the long/short options
  COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
  return 0
}
complete -F _lxp lxp

_lxc() {
  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  opts="--help --proto-root --packages --hostname --address"

  # Complete the arguments of long/short options
  case "${prev}" in
    --proto-root)
        _filedir ;
        return 0 ;;
    --packages)
        # TODO: generate a list instead of a single package
        COMPREPLY=( $(compgen -W "$(_find_pkgs)" -- ${cur}) ) ;
        return 0 ;;
    --hostname|--address)
        COMPREPLY=( $(compgen -W "" -- ${cur}) ) ;
        return 0 ;;
     *)
    ;;
  esac

  # Complete the long/short options
  COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
  return 0
}
complete -F _lxc lxc

_lxd() {
  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  opts="--help --clone-root --hypervisor --cpu --memory --size --root-filesystem"

  # Complete the arguments of long/short options
  case "${prev}" in
    --clone-root)
        _filedir ;
        return 0 ;;
    --hypervisor)
        COMPREPLY=( $(compgen -W "${SUPPORTED_HYPERVISORS[*]}" -- ${cur}) ) ;
        return 0 ;;
    --cpu)
        COMPREPLY=( $(compgen -W "$SUPPORTED_CPU" -- ${cur}) ) ;
        return 0 ;;
    --root-filesystem)
        COMPREPLY=( $(compgen -W "${SUPPORTED_FILESYSTEMS[*]}" -- ${cur}) ) ;
        return 0 ;;
    --memory|--size)
        COMPREPLY=( $(compgen -W "" -- ${cur}) ) ;
        return 0 ;;
     *)
    ;;
  esac

  # Complete the long/short options
  COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
  return 0
}
complete -F _lxd lxd
