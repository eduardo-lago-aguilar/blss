#!/bin/bash
#
# WELCOME TO BLSS
#
# BLSS stands for Bootstrapped Linux-Server Systems, it's a collection of command line tools to
# quickly assemble, without user interaction, multiple small and optimized Linux-Server Systems
# with the purpose of an easy deployment of distributed systems, like Apache Hadoop Cloudera
# Distribution, where every Linux-Server may have a different role in the computational cluster or
# grid.
# With BLSS you can finally verify -with just one Enter key pressing- if your package-based
# system really works when you distribute it, and pay any technical debt you posses with
# yourself not accomplished yet because you donâ€™t have the necessary time for install 10 or 100
# servers coordinating jobs in a network.
# Systems you manage with BLSS scripts fit better for servicing purpose, they are reduced
# in size and have a small memory footprint. The lifecycle of such systems is composed of
# three phases, each one with a corresponding script: prototyping with lxp, cloning with lxc and
# deployment with lxd.
#
# AUTHOR
#   Written by Eduardo Lago Aguilar, eduardo.lago.aguilar@gmail.com

# Integration Test Suite for proto A.  
#
# Multiple calls to lxp can be very time consuming. Therefor several integration 
# tests are executed for a single proto. An integration test, for any proto, 
# assumes that the proto is located at '/tmp/protoitroot', so every verification is 
# performed on the filesystem hierarchy directly under '/tmp/protoitroot'.
# 
# Proto settings for Integration Tests are enviroments located under the 'env' 
# directory. The enviroment corresponding to the "protoA", for example, should 
# have the path $BLSS_HOME/env/A.
# 
# In the scope of Integration Tests, protos are named as 'proto' + one alphabet 
# letters from A..Z in uppercase. 

# Resolve script location, $0 may be a link
script="$0"
# Need this for relative symlinks
while [ -h "$script" ] ; do
  lst=$(ls -ld "$script")
  lnk=$(expr "$lst" : '.*-> \(.*\)$')
  if expr "$lnk" : '/.*' > /dev/null; then
    script="$lnk"
  else
    script=$(dirname "$script")/"$lnk"
  fi
done
BLSS_HOME=$(dirname "$script")/..
BIN="$BLSS_HOME"/bin
ENV="$BLSS_HOME"/env
EXT="$BLSS_HOME"/ext
TST="$BLSS_HOME"/tst

. "$TST"/tst-commons

# Total amount of tests to perfom
plan_tests 6

# Test Case: Tests for size
DU=$(sudo du -hs /tmp/protoitroot)
DU=${DU%%M[[:space:]]*/tmp/protoitroot}
(( DU <= 265 ))
ok $? "Verify is proto size $DU <= 265MB" 

. "$TST"/it-proto-all

# Test Case: Tests for GRUB
ptx grep -v "^$" /boot/grub/menu.lst | awk '{NF=NF; print $0}' | tail -n 9 | head -n 8 | {
  ln_is   "title Ubuntu, kernel "$(kver)"" "Verify /boot/grub/menu.lst default option" 
  ln_like "uuid\ ................"
  ln_like "kernel\ /boot/vmlinuz-"$(kver)"\ root=UUID=................\ ro quiet splash"
  ln_is   "initrd /boot/initrd.img-"$(kver)""
  
  ln_is   "title Ubuntu, kernel "$(kver)" (hd0,0)" "Verify /boot/grub/menu.lst recovery option"
  ln_like "uuid\ ................"
  ln_like "kernel\ /boot/vmlinuz-"$(kver)"\ root=UUID=................\ ro single"
  ln_is   "initrd /boot/initrd.img-"$(kver)""
}
ptx grep "^timeout 0$" /boot/grub/menu.lst | {
  one_ln "Verify timeout 0 at /boot/grub/menu.lst"
}

# Test Case: Tests for Kernel
ptx dpkg --get-selections linux-image\* | awk '{print $1" "$2}' | {
  ln_is "linux-image-"$MJ.$MN.$RV-$RS"-server install" "Verify if current Kernel is the Linux kernel image on Server Equipment"
  ln_is "linux-image-server install"
  no_ln "Verify if no other linux-image-* package is installed"
}

# Test Case: Test for ngetty
ptx egrep 'exec \/sbin\/getty -8 38400 tty1' /etc/init/tty1.conf | {
  ln_is "# exec /sbin/getty -8 38400 tty1"  "Verify if getty for tty1 is commented"
}
ptx egrep 'exec \/sbin\/ngetty 1 2 3 4 5 6' /etc/init/tty1.conf | {
  ln_is "exec /sbin/ngetty 1 2 3 4 5 6" "Verify if ngetty is configured for all ttys"
}
ptx egrep -v '^(#.*)?$' /etc/init/tty2.conf | {
  no_ln "Verify if getty for tty2 is commented"
}
ptx egrep -v '^(#.*)?$' /etc/init/tty3.conf | {
  no_ln "Verify if getty for tty3 is commented"
}
ptx egrep -v '^(#.*)?$' /etc/init/tty4.conf | {
  no_ln "Verify if getty for tty4 is commented"
}
ptx egrep -v '^(#.*)?$' /etc/init/tty5.conf | {
  no_ln "Verify if getty for tty5 is commented"
}
ptx egrep -v '^(#.*)?$' /etc/init/tty6.conf | {
  no_ln "Verify if getty for tty6 is commented"
}
