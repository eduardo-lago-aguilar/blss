#!/bin/bash

# === WELCOME ===
# 
# BLSS stands for Bootstrapped Linux Server Systems, it is set of tools to quickly 
# assemble multiple small & optimized Linux-based virtual appliances with the 
# purpose of an easy deployment of package-based distributed systems, like Apache 
# Hadoop Cloudera Distribution, where every server have a different role in a 
# computational cluster or grid. 
# 
# The delivered virtual appliances fit better for servicing purpose, they are 
# reduced in size and have a small memory footprint. The lifecycle of such systems 
# is composed of three phases: prototyping, where shared packages & configuration 
# is settled; cloning, where different server roles are defined; and finally 
# deployment where unique appliances are produced.
# 
# The project is hosted at https://bitbucket.org/eduardo_lago_aguilar/blss
# 
# === AUTHOR ===
#   Written by Eduardo Lago Aguilar, eduardo.lago.aguilar@gmail.com, 
#   http://eduardo-lago.blogspot.com

# ut-lxd-opts:
#
#   Tests for failing conditions on the command line and configuration files 
# options for lxd script.

# Resolve script location, $0 may be a link
script="$0"
# Need this for relative symlinks
while [ -h "$script" ] ; do
  lst=$(ls -ld "$script")
  lnk=$(expr "$lst" : '.*-> \(.*\)$')
  if expr "$lnk" : '/.*' > /dev/null; then
    script="$lnk"
  else
    script=$(dirname "$script")/"$lnk"
  fi
done
BLSS_HOME=$(dirname "$script")/..
BIN="$BLSS_HOME"/bin
ENV="$BLSS_HOME"/env
EXT="$BLSS_HOME"/ext
TST="$BLSS_HOME"/tst

. "$TST"/tst-commons 

# Total amount of tests to perfom
plan_tests 47

### Test Case: Tests for DEPLOYMENT_ROOT command line option

not_ok_ "Verify if command line option 'DEPLOYMENT_ROOT' missing fails" $BIN/lxd | \
  ln_like "DEPLOYMENT_ROOT' requires an non-empty argument"

DR=$(mktemp -d) && touch $DR/xfile
not_ok_ "Verify if command line option 'DEPLOYMENT_ROOT=(non-empty directory)' fails" $BIN/lxd $DR | \
  lst_ln_is ">>> ERROR: DEPLOYMENT_ROOT command line option shall be an existing empty directory or a non-existing directory >>>"
rm -rf $DR
unset DR

### End Test Case

### Test Case: Test for environment
DR=$(mktemp -d)

export BLSS_ENV=$(mktemp -d) && rmdir "$BLSS_ENV"
not_ok_ "Verify if BLSS_ENV=(non-existing directory) fails" $BIN/lxd $DR | \
  ln_is ">>> ERROR: Environment '$BLSS_ENV' doesn't exists or isn't a readable directory >>>"
unset BLSS_ENV

export BLSS_ENV=$(mktemp)
not_ok_ "Verify if BLSS_ENV=(non-a-directory) fails" $BIN/lxd $DR | \
  ln_is ">>> ERROR: Environment '$BLSS_ENV' doesn't exists or isn't a readable directory >>>"
rm $BLSS_ENV
unset BLSS_ENV

rmdir $DR
unset DR
### End Test Case

### Test Case: Tests for clone-root command line option
export BLSS_ENV=$(mktemp -d) && DR=$(mktemp -d)

not_ok_ "Verify if command line option '--clone-root' is missing fails" $BIN/lxd $DR | \
  ln_like "clone-root' requires an non-empty argument"

not_ok_ "Verify if command line option '--clone-root' without argument fails" $BIN/lxd $DR --clone-root | \
  ln_like "--clone-root' requires an argument"

not_ok_ "Verify if command line option '--clone-root' with an empty argument fails" $BIN/lxd $DR --clone-root "" | \
  ln_like ">>> ERROR: Command line option '--clone-root' requires an non-empty argument >>>"

CR=$(mktemp -d) && rmdir $CR
not_ok_ "Verify if command line option '--clone-root=(non-existing directory)' fails" $BIN/lxd $DR --clone-root $CR | \
  lst_ln_is ">>> ERROR: --clone-root/clone_root command line/conf file option shall be an existing non-empty directory containing a clone system >>>"
unset CR

CR=$(mktemp -d)
not_ok_ "Verify if command line option '--clone-root=(empty directory)' fails" $BIN/lxd $DR --clone-root $CR | \
  lst_ln_is ">>> ERROR: --clone-root/clone_root command line/conf file option shall be an existing non-empty directory containing a clone system >>>"
rmdir $CR
unset CR

rmdir $BLSS_ENV $DR 
unset BLSS_ENV DR 
### End Test Case

### Test Case: Tests for hypervisor command line option
export BLSS_ENV=$(mktemp -d) && CR=$(mktemp -d) && touch $CR/xfile && DR=$(mktemp -d)

not_ok_ "Verify if a repeated command line option --hypervisor fails" $BIN/lxd $DR --clone-root $CR --hypervisor "kvm" --hypervisor "kvm" | \
  ln_is ">>> ERROR: --hypervisor command line option was already specified >>>"
not_ok_ "Verify if command line option --hypervisor without argument fails" $BIN/lxd $DR --clone-root $CR --hypervisor | \
  ln_like "--hypervisor' requires an argument"

not_ok_ "Verify if command line option --hypervisor with an empty argument fails" $BIN/lxd $DR --clone-root $CR --hypervisor "" | \
  ln_like ">>> ERROR: Command line option '--hypervisor' requires an non-empty argument >>>"

not_ok_ "Verify if command line option --hypervisor with an unsupported argument fails" $BIN/lxd $DR --clone-root $CR --hypervisor "unknown" | \
  lst_ln_like ">>> ERROR: Command line/conf file option --hypervisor/hypervisor requires a supported argument. See --help command line option for help >>>"

rm -r $BLSS_ENV $CR $DR
unset BLSS_ENV CR DR
### End Test Case

### Test Case: Tests for cpu command line option
export BLSS_ENV=$(mktemp -d) && CR=$(mktemp -d) && touch $CR/xfile && DR=$(mktemp -d)

not_ok_ "Verify if a repeated command line option --cpu fails" $BIN/lxd $DR --clone-root $CR --cpu 2 --cpu 4 | \
  ln_is ">>> ERROR: --cpu command line option was already specified >>>"

not_ok_ "Verify if command line option --cpu without argument fails" $BIN/lxd $DR --clone-root $CR --cpu | \
  ln_like "--cpu' requires an argument"

not_ok_ "Verify if command line option --cpu with an empty argument fails" $BIN/lxd $DR --clone-root $CR --cpu "" | \
  ln_like ">>> ERROR: Command line option '--cpu' requires an non-empty argument >>>"

not_ok_ "Verify if command line option --cpu with an unsupported argument fails" $BIN/lxd $DR --clone-root $CR --cpu NaN | \
  lst_ln_like ">>> ERROR: Command line/conf file option --cpu/cpu requires a supported argument. See --help command line option for help >>>"

not_ok_ "Verify if command line option --cpu=0 fails" $BIN/lxd $DR --clone-root $CR --cpu 0 | \
  lst_ln_like ">>> ERROR: Command line/conf file option --cpu/cpu requires a supported argument. See --help command line option for help >>>"

rm -r $BLSS_ENV $CR $DR
unset BLSS_ENV CR DR
### End Test Case

### Test Case: Tests for memory command line option
export BLSS_ENV=$(mktemp -d) && CR=$(mktemp -d) && touch $CR/xfile && DR=$(mktemp -d)

not_ok_ "Verify if a repeated command line option --memory fails" $BIN/lxd $DR --clone-root $CR --memory 128 --memory 256 | \
  ln_is ">>> ERROR: --memory command line option was already specified >>>"

not_ok_ "Verify if command line option --memory without argument fails" $BIN/lxd $DR --clone-root $CR --memory | \
  ln_like "--memory' requires an argument"

not_ok_ "Verify if command line option --memory with an empty argument fails" $BIN/lxd $DR --clone-root $CR --memory "" | \
  ln_like ">>> ERROR: Command line option '--memory' requires an non-empty argument >>>"

not_ok_ "Verify if command line option --memory with an unsupported argument fails" $BIN/lxd $DR --clone-root $CR --memory NaN | \
  lst_ln_like ">>> ERROR: Command line/conf file option --memory/memory requires a supported argument. See --help command line option for help >>>"

not_ok_ "Verify if command line option --memory=0 fails" $BIN/lxd $DR --clone-root $CR --memory 0 | \
  lst_ln_like ">>> ERROR: Command line/conf file option --memory/memory requires a supported argument. See --help command line option for help >>>"

rm -r $BLSS_ENV $CR $DR
unset BLSS_ENV CR DR
### End Test Case

### Test Case: Tests for size command line option
export BLSS_ENV=$(mktemp -d) && CR=$(mktemp -d) && touch $CR/xfile && DR=$(mktemp -d)

not_ok_ "Verify if a repeated command line option --size fails" $BIN/lxd $DR --clone-root $CR --size 1024 --size 2048 | \
  ln_is ">>> ERROR: --size command line option was already specified >>>"

not_ok_ "Verify if command line option --size without argument fails" $BIN/lxd $DR --clone-root $CR --size | \
  ln_like "--size' requires an argument"

not_ok_ "Verify if command line option --size with an empty argument fails" $BIN/lxd $DR --clone-root $CR --size "" | \
  ln_like ">>> ERROR: Command line option '--size' requires an non-empty argument >>>"

not_ok_ "Verify if command line option --size with an unsupported argument fails" $BIN/lxd $DR --clone-root $CR --size NaN | \
  lst_ln_like ">>> ERROR: Command line/conf file option --size/size requires a supported argument. See --help command line option for help >>>"

not_ok_ "Verify if command line option --size=0 fails" $BIN/lxd $DR --clone-root $CR --size 0 | \
  lst_ln_like ">>> ERROR: Command line/conf file option --size/size requires a supported argument. See --help command line option for help >>>"

rm -r $BLSS_ENV $CR $DR
unset BLSS_ENV CR DR
### End Test Case

### Test Case: Tests for root-filesystem command line option
export BLSS_ENV=$(mktemp -d) && CR=$(mktemp -d) && touch $CR/xfile && DR=$(mktemp -d)

not_ok_ "Verify if a repeated command line option --root-filesystem fails" $BIN/lxd $DR --clone-root $CR --root-filesystem "ext3" --root-filesystem "ext3" | \
  ln_is ">>> ERROR: --root-filesystem command line option was already specified >>>"
not_ok_ "Verify if command line option --root-filesystem without argument fails" $BIN/lxd $DR --clone-root $CR --root-filesystem | \
  ln_like "--root-filesystem' requires an argument"

not_ok_ "Verify if command line option --root-filesystem with an empty argument fails" $BIN/lxd $DR --clone-root $CR --root-filesystem "" | \
  ln_like ">>> ERROR: Command line option '--root-filesystem' requires an non-empty argument >>>"

not_ok_ "Verify if command line option --root-filesystem with an unsupported argument fails" $BIN/lxd $DR --clone-root $CR --root-filesystem "unknown" | \
  lst_ln_like ">>> ERROR: Command line/conf file option --root-filesystem/root_filesystem requires a supported argument. See --help command line option for help >>>"

rm -r $BLSS_ENV $CR $DR
unset BLSS_ENV CR DR
### End Test Case


### Test Case: Tests for formats command line option
export BLSS_ENV=$(mktemp -d) && CR=$(mktemp -d) && touch $CR/xfile && DR=$(mktemp -d)

not_ok_ "Verify if a repeated command line option --formats fails" $BIN/lxd $DR --clone-root $CR --formats "raw qcow2" --formats "raw qcow2" | \
  ln_is ">>> ERROR: --formats command line option was already specified >>>"
not_ok_ "Verify if command line option --formats without argument fails" $BIN/lxd $DR --clone-root $CR --formats | \
  ln_like "--formats' requires an argument"
not_ok_ "Verify if command line option --formats with an empty argument fails" $BIN/lxd $DR --clone-root $CR --formats "" | \
  ln_like ">>> ERROR: Command line option '--formats' requires an non-empty argument >>>"
not_ok_ "Verify if command line option --formats with an unsupported argument fails" $BIN/lxd $DR --clone-root $CR --formats "unknown" | \
  lst_ln_like ">>> ERROR: Command line/conf file option --formats/formats requires a supported argument. See --help command line option for help >>>"
not_ok_ "Verify if command line option --formats with a repeated format in the argument fails" $BIN/lxd $DR --clone-root $CR --formats "raw qcow2 raw" | \
  ln_like ">>> ERROR: Command line/conf file option --formats/formats contains a repeated value in the argument. See --help command line option for help >>>"

rm -r $BLSS_ENV $CR $DR
unset BLSS_ENV CR DR
### End Test Case

### Test Case: Tests for --packages command line option
export BLSS_ENV=$(mktemp -d) && CR=$(mktemp -d) && touch $CR/xfile && DR=$(mktemp -d)

not_ok_ "Verify if a repeated command line option --packages fails" $BIN/lxd --packages "apache2" --packages "mc" | \
  ln_is ">>> ERROR: --packages command line option was already specified >>>"

not_ok_ "Verify if command line option --packages without argument fails" $BIN/lxd --packages | \
  ln_like "--packages' requires an argument"

not_ok_ "Verify if command line option --packages with an empty argument fails" $BIN/lxd --packages "" | \
  ln_like ">>> ERROR: Command line option '--packages' requires an non-empty argument >>>"

rm -r $BLSS_ENV $CR $DR
unset BLSS_ENV CR DR
### End Test Case

### Test Case: Tests for --hostname command line option
export BLSS_ENV=$(mktemp -d) && CR=$(mktemp -d) && touch $CR/xfile && DR=$(mktemp -d)

not_ok_ "Verify if a repeated command line option --hostname fails" $BIN/lxd $DR --clone-root $CR --hostname "myserver" --hostname "servermy" | \
  ln_is ">>> ERROR: --hostname command line option was already specified >>>"

not_ok_ "Verify if command line option --hostname without argument fails" $BIN/lxd $DR --clone-root $CR --hostname | \
  ln_like "--hostname' requires an argument"

not_ok_ "Verify if command line option --hostname with an empty argument fails" $BIN/lxd $DR --clone-root $CR --hostname "" | \
  ln_like ">>> ERROR: Command line option '--hostname' requires an non-empty argument >>>"

# TODO: test for invalid argument in --hostname cmd ln opt

rm -r $BLSS_ENV $CR $DR
unset BLSS_ENV CR DR
### End Test Case


### Test Case: Tests for --address command line option
export BLSS_ENV=$(mktemp -d) && CR=$(mktemp -d) && touch $CR/xfile && DR=$(mktemp -d)

not_ok_ "Verify if a repeated command line option --address fails" $BIN/lxd $DR --clone-root $CR --address 192.168.1.1 --address 192.168.1.1 | \
  ln_is ">>> ERROR: --address command line option was already specified >>>"

not_ok_ "Verify if command line option '--address' without argument fails" $BIN/lxd $DR --clone-root $CR --address | \
 ln_like "--address' requires an argument"  

not_ok_ "Verify if command line option '--address' with an empty argument fails" $BIN/lxd $DR --clone-root $CR --address "" | \
 ln_like ">>> ERROR: Command line option '--address' requires an non-empty argument >>>"  

not_ok_ "Verify if command line option --address with an invalid argument fails" $BIN/lxd $DR --clone-root $CR --address 192.168.0.256 | \
 lst_ln_is ">>> ERROR: Command line/conf file option --address/address requires a supported argument. See --help command line option for help >>>"

rm -r $BLSS_ENV $CR $DR
unset BLSS_ENV CR DR
### End Test Case
